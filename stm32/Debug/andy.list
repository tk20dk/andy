
andy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051ec  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080053b0  080053b0  000153b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053c8  080053c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080053c8  080053c8  000153c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053d0  080053d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053d0  080053d0  000153d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053d4  080053d4  000153d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080053d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000754  2000000c  080053e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000760  080053e4  00020760  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013155  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002815  00000000  00000000  00033191  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011d0  00000000  00000000  000359a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010c8  00000000  00000000  00036b78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000235c8  00000000  00000000  00037c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ee3c  00000000  00000000  0005b208  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4450  00000000  00000000  0006a044  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013e494  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bf4  00000000  00000000  0013e510  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005398 	.word	0x08005398

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08005398 	.word	0x08005398

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000508:	f000 ff64 	bl	80013d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050c:	f000 f816 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000510:	f000 fac0 	bl	8000a94 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000514:	f000 fa90 	bl	8000a38 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000518:	f000 f8be 	bl	8000698 <MX_ADC1_Init>
  MX_HDMI_CEC_Init();
 800051c:	f000 f90e 	bl	800073c <MX_HDMI_CEC_Init>
  MX_I2C2_Init();
 8000520:	f000 f940 	bl	80007a4 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000524:	f000 f96c 	bl	8000800 <MX_I2C3_Init>
  MX_I2S1_Init();
 8000528:	f000 f998 	bl	800085c <MX_I2S1_Init>
  MX_SAI1_Init();
 800052c:	f000 f9c4 	bl	80008b8 <MX_SAI1_Init>
  MX_SPDIFRX_Init();
 8000530:	f000 fa28 	bl	8000984 <MX_SPDIFRX_Init>
  MX_UART5_Init();
 8000534:	f000 fa56 	bl	80009e4 <MX_UART5_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000538:	e7fe      	b.n	8000538 <main+0x34>
	...

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b0ac      	sub	sp, #176	; 0xb0
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000546:	2234      	movs	r2, #52	; 0x34
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f004 ff1c 	bl	8005388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000560:	f107 030c 	add.w	r3, r7, #12
 8000564:	225c      	movs	r2, #92	; 0x5c
 8000566:	2100      	movs	r1, #0
 8000568:	4618      	mov	r0, r3
 800056a:	f004 ff0d 	bl	8005388 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	4b47      	ldr	r3, [pc, #284]	; (8000690 <SystemClock_Config+0x154>)
 8000574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000576:	4a46      	ldr	r2, [pc, #280]	; (8000690 <SystemClock_Config+0x154>)
 8000578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057c:	6413      	str	r3, [r2, #64]	; 0x40
 800057e:	4b44      	ldr	r3, [pc, #272]	; (8000690 <SystemClock_Config+0x154>)
 8000580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	4b41      	ldr	r3, [pc, #260]	; (8000694 <SystemClock_Config+0x158>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000596:	4a3f      	ldr	r2, [pc, #252]	; (8000694 <SystemClock_Config+0x158>)
 8000598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800059c:	6013      	str	r3, [r2, #0]
 800059e:	4b3d      	ldr	r3, [pc, #244]	; (8000694 <SystemClock_Config+0x158>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005aa:	2303      	movs	r3, #3
 80005ac:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b6:	2301      	movs	r3, #1
 80005b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005bc:	2310      	movs	r3, #16
 80005be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c2:	2302      	movs	r3, #2
 80005c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 15;
 80005d0:	230f      	movs	r3, #15
 80005d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 144;
 80005d6:	2390      	movs	r3, #144	; 0x90
 80005d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005dc:	2302      	movs	r3, #2
 80005de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80005e2:	2305      	movs	r3, #5
 80005e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 fa4e 	bl	8003a94 <HAL_RCC_OscConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005fe:	f000 faf5 	bl	8000bec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000602:	230f      	movs	r3, #15
 8000604:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000606:	2300      	movs	r3, #0
 8000608:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000616:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800061a:	2100      	movs	r1, #0
 800061c:	4618      	mov	r0, r3
 800061e:	f002 fa85 	bl	8002b2c <HAL_RCC_ClockConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000628:	f000 fae0 	bl	8000bec <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB2|RCC_PERIPHCLK_SAI1
 800062c:	f240 5346 	movw	r3, #1350	; 0x546
 8000630:	60fb      	str	r3, [r7, #12]
                              |RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_CLK48
                              |RCC_PERIPHCLK_CEC;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000632:	23c0      	movs	r3, #192	; 0xc0
 8000634:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLI2SP_DIV2;
 8000636:	2302      	movs	r3, #2
 8000638:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 800063a:	2310      	movs	r3, #16
 800063c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800063e:	2302      	movs	r3, #2
 8000640:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000642:	2302      	movs	r3, #2
 8000644:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 16;
 8000646:	2310      	movs	r3, #16
 8000648:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800064a:	23c0      	movs	r3, #192	; 0xc0
 800064c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800064e:	2302      	movs	r3, #2
 8000650:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000652:	2302      	movs	r3, #2
 8000654:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8000656:	2301      	movs	r3, #1
 8000658:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800065a:	2301      	movs	r3, #1
 800065c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800065e:	2300      	movs	r3, #0
 8000660:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.SpdifClockSelection = RCC_SPDIFRXCLKSOURCE_PLLR;
 8000662:	2300      	movs	r3, #0
 8000664:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.I2sApb2ClockSelection = RCC_I2SAPB2CLKSOURCE_PLLI2S;
 8000666:	2300      	movs	r3, #0
 8000668:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 800066a:	2300      	movs	r3, #0
 800066c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.CecClockSelection = RCC_CECCLKSOURCE_HSI;
 800066e:	2300      	movs	r3, #0
 8000670:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000672:	f107 030c 	add.w	r3, r7, #12
 8000676:	4618      	mov	r0, r3
 8000678:	f002 fb72 	bl	8002d60 <HAL_RCCEx_PeriphCLKConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8000682:	f000 fab3 	bl	8000bec <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	37b0      	adds	r7, #176	; 0xb0
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800069e:	463b      	mov	r3, r7
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006aa:	4b21      	ldr	r3, [pc, #132]	; (8000730 <MX_ADC1_Init+0x98>)
 80006ac:	4a21      	ldr	r2, [pc, #132]	; (8000734 <MX_ADC1_Init+0x9c>)
 80006ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006b0:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <MX_ADC1_Init+0x98>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006b6:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <MX_ADC1_Init+0x98>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006bc:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <MX_ADC1_Init+0x98>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006c2:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <MX_ADC1_Init+0x98>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006c8:	4b19      	ldr	r3, [pc, #100]	; (8000730 <MX_ADC1_Init+0x98>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006d0:	4b17      	ldr	r3, [pc, #92]	; (8000730 <MX_ADC1_Init+0x98>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d6:	4b16      	ldr	r3, [pc, #88]	; (8000730 <MX_ADC1_Init+0x98>)
 80006d8:	4a17      	ldr	r2, [pc, #92]	; (8000738 <MX_ADC1_Init+0xa0>)
 80006da:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006dc:	4b14      	ldr	r3, [pc, #80]	; (8000730 <MX_ADC1_Init+0x98>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006e2:	4b13      	ldr	r3, [pc, #76]	; (8000730 <MX_ADC1_Init+0x98>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_ADC1_Init+0x98>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_ADC1_Init+0x98>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006f6:	480e      	ldr	r0, [pc, #56]	; (8000730 <MX_ADC1_Init+0x98>)
 80006f8:	f000 ff00 	bl	80014fc <HAL_ADC_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000702:	f000 fa73 	bl	8000bec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000706:	2303      	movs	r3, #3
 8000708:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800070a:	2301      	movs	r3, #1
 800070c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000712:	463b      	mov	r3, r7
 8000714:	4619      	mov	r1, r3
 8000716:	4806      	ldr	r0, [pc, #24]	; (8000730 <MX_ADC1_Init+0x98>)
 8000718:	f000 ff34 	bl	8001584 <HAL_ADC_ConfigChannel>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000722:	f000 fa63 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000634 	.word	0x20000634
 8000734:	40012000 	.word	0x40012000
 8000738:	0f000001 	.word	0x0f000001

0800073c <MX_HDMI_CEC_Init>:
  * @brief HDMI_CEC Initialization Function
  * @param None
  * @retval None
  */
static void MX_HDMI_CEC_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END HDMI_CEC_Init 0 */

  /* USER CODE BEGIN HDMI_CEC_Init 1 */

  /* USER CODE END HDMI_CEC_Init 1 */
  hcec.Instance = CEC;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <MX_HDMI_CEC_Init+0x5c>)
 8000742:	4a16      	ldr	r2, [pc, #88]	; (800079c <MX_HDMI_CEC_Init+0x60>)
 8000744:	601a      	str	r2, [r3, #0]
  hcec.Init.SignalFreeTime = CEC_DEFAULT_SFT;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_HDMI_CEC_Init+0x5c>)
 8000748:	2200      	movs	r2, #0
 800074a:	605a      	str	r2, [r3, #4]
  hcec.Init.Tolerance = CEC_STANDARD_TOLERANCE;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_HDMI_CEC_Init+0x5c>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  hcec.Init.BRERxStop = CEC_RX_STOP_ON_BRE;
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_HDMI_CEC_Init+0x5c>)
 8000754:	2210      	movs	r2, #16
 8000756:	60da      	str	r2, [r3, #12]
  hcec.Init.BREErrorBitGen = CEC_BRE_ERRORBIT_NO_GENERATION;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_HDMI_CEC_Init+0x5c>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  hcec.Init.LBPEErrorBitGen = CEC_LBPE_ERRORBIT_NO_GENERATION;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_HDMI_CEC_Init+0x5c>)
 8000760:	2200      	movs	r2, #0
 8000762:	615a      	str	r2, [r3, #20]
  hcec.Init.BroadcastMsgNoErrorBitGen = CEC_BROADCASTERROR_ERRORBIT_GENERATION;
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_HDMI_CEC_Init+0x5c>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]
  hcec.Init.SignalFreeTimeOption = CEC_SFT_START_ON_TXSOM;
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <MX_HDMI_CEC_Init+0x5c>)
 800076c:	2200      	movs	r2, #0
 800076e:	61da      	str	r2, [r3, #28]
  hcec.Init.ListenMode = CEC_FULL_LISTENING_MODE;
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_HDMI_CEC_Init+0x5c>)
 8000772:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000776:	621a      	str	r2, [r3, #32]
  hcec.Init.OwnAddress = CEC_OWN_ADDRESS_NONE;
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <MX_HDMI_CEC_Init+0x5c>)
 800077a:	2200      	movs	r2, #0
 800077c:	849a      	strh	r2, [r3, #36]	; 0x24
  hcec.Init.RxBuffer = cec_receive_buffer;
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_HDMI_CEC_Init+0x5c>)
 8000780:	4a07      	ldr	r2, [pc, #28]	; (80007a0 <MX_HDMI_CEC_Init+0x64>)
 8000782:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_CEC_Init(&hcec) != HAL_OK)
 8000784:	4804      	ldr	r0, [pc, #16]	; (8000798 <MX_HDMI_CEC_Init+0x5c>)
 8000786:	f001 f92b 	bl	80019e0 <HAL_CEC_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_HDMI_CEC_Init+0x58>
  {
    Error_Handler();
 8000790:	f000 fa2c 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN HDMI_CEC_Init 2 */

  /* USER CODE END HDMI_CEC_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000528 	.word	0x20000528
 800079c:	40006c00 	.word	0x40006c00
 80007a0:	2000074c 	.word	0x2000074c

080007a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <MX_I2C2_Init+0x50>)
 80007aa:	4a13      	ldr	r2, [pc, #76]	; (80007f8 <MX_I2C2_Init+0x54>)
 80007ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_I2C2_Init+0x50>)
 80007b0:	4a12      	ldr	r2, [pc, #72]	; (80007fc <MX_I2C2_Init+0x58>)
 80007b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_I2C2_Init+0x50>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_I2C2_Init+0x50>)
 80007bc:	2200      	movs	r2, #0
 80007be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <MX_I2C2_Init+0x50>)
 80007c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007c6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c8:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <MX_I2C2_Init+0x50>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80007ce:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <MX_I2C2_Init+0x50>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d4:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <MX_I2C2_Init+0x50>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <MX_I2C2_Init+0x50>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007e0:	4804      	ldr	r0, [pc, #16]	; (80007f4 <MX_I2C2_Init+0x50>)
 80007e2:	f001 fd25 	bl	8002230 <HAL_I2C_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80007ec:	f000 f9fe 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	200004d4 	.word	0x200004d4
 80007f8:	40005800 	.word	0x40005800
 80007fc:	00061a80 	.word	0x00061a80

08000800 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <MX_I2C3_Init+0x50>)
 8000806:	4a13      	ldr	r2, [pc, #76]	; (8000854 <MX_I2C3_Init+0x54>)
 8000808:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_I2C3_Init+0x50>)
 800080c:	4a12      	ldr	r2, [pc, #72]	; (8000858 <MX_I2C3_Init+0x58>)
 800080e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_I2C3_Init+0x50>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_I2C3_Init+0x50>)
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_I2C3_Init+0x50>)
 800081e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000822:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000824:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <MX_I2C3_Init+0x50>)
 8000826:	2200      	movs	r2, #0
 8000828:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_I2C3_Init+0x50>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <MX_I2C3_Init+0x50>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_I2C3_Init+0x50>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800083c:	4804      	ldr	r0, [pc, #16]	; (8000850 <MX_I2C3_Init+0x50>)
 800083e:	f001 fcf7 	bl	8002230 <HAL_I2C_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000848:	f000 f9d0 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	2000002c 	.word	0x2000002c
 8000854:	40005c00 	.word	0x40005c00
 8000858:	000186a0 	.word	0x000186a0

0800085c <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 8000860:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MX_I2S1_Init+0x54>)
 8000862:	4a14      	ldr	r2, [pc, #80]	; (80008b4 <MX_I2S1_Init+0x58>)
 8000864:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 8000866:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <MX_I2S1_Init+0x54>)
 8000868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800086c:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <MX_I2S1_Init+0x54>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000874:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_I2S1_Init+0x54>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800087a:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <MX_I2S1_Init+0x54>)
 800087c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000880:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <MX_I2S1_Init+0x54>)
 8000884:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000888:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_I2S1_Init+0x54>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <MX_I2S1_Init+0x54>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  hi2s1.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_I2S1_Init+0x54>)
 8000898:	2200      	movs	r2, #0
 800089a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <MX_I2S1_Init+0x54>)
 800089e:	f001 fdff 	bl	80024a0 <HAL_I2S_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_I2S1_Init+0x50>
  {
    Error_Handler();
 80008a8:	f000 f9a0 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	2000067c 	.word	0x2000067c
 80008b4:	40013000 	.word	0x40013000

080008b8 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80008bc:	4b2c      	ldr	r3, [pc, #176]	; (8000970 <MX_SAI1_Init+0xb8>)
 80008be:	4a2d      	ldr	r2, [pc, #180]	; (8000974 <MX_SAI1_Init+0xbc>)
 80008c0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_SPDIF_PROTOCOL;
 80008c2:	4b2b      	ldr	r3, [pc, #172]	; (8000970 <MX_SAI1_Init+0xb8>)
 80008c4:	2204      	movs	r2, #4
 80008c6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80008c8:	4b29      	ldr	r3, [pc, #164]	; (8000970 <MX_SAI1_Init+0xb8>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80008ce:	4b28      	ldr	r3, [pc, #160]	; (8000970 <MX_SAI1_Init+0xb8>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80008d4:	4b26      	ldr	r3, [pc, #152]	; (8000970 <MX_SAI1_Init+0xb8>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80008da:	4b25      	ldr	r3, [pc, #148]	; (8000970 <MX_SAI1_Init+0xb8>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80008e0:	4b23      	ldr	r3, [pc, #140]	; (8000970 <MX_SAI1_Init+0xb8>)
 80008e2:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80008e6:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80008e8:	4b21      	ldr	r3, [pc, #132]	; (8000970 <MX_SAI1_Init+0xb8>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80008ee:	4b20      	ldr	r3, [pc, #128]	; (8000970 <MX_SAI1_Init+0xb8>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80008f4:	4b1e      	ldr	r3, [pc, #120]	; (8000970 <MX_SAI1_Init+0xb8>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80008fa:	481d      	ldr	r0, [pc, #116]	; (8000970 <MX_SAI1_Init+0xb8>)
 80008fc:	f003 fb60 	bl	8003fc0 <HAL_SAI_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_SAI1_Init+0x52>
  {
    Error_Handler();
 8000906:	f000 f971 	bl	8000bec <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 800090a:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <MX_SAI1_Init+0xc0>)
 800090c:	4a1b      	ldr	r2, [pc, #108]	; (800097c <MX_SAI1_Init+0xc4>)
 800090e:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000910:	4b19      	ldr	r3, [pc, #100]	; (8000978 <MX_SAI1_Init+0xc0>)
 8000912:	2200      	movs	r2, #0
 8000914:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000916:	4b18      	ldr	r3, [pc, #96]	; (8000978 <MX_SAI1_Init+0xc0>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800091c:	4b16      	ldr	r3, [pc, #88]	; (8000978 <MX_SAI1_Init+0xc0>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <MX_SAI1_Init+0xc0>)
 8000924:	2200      	movs	r2, #0
 8000926:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <MX_SAI1_Init+0xc0>)
 800092a:	2200      	movs	r2, #0
 800092c:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.ClockSource = SAI_CLKSOURCE_NA;
 800092e:	4b12      	ldr	r3, [pc, #72]	; (8000978 <MX_SAI1_Init+0xc0>)
 8000930:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000934:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <MX_SAI1_Init+0xc0>)
 8000938:	4a11      	ldr	r2, [pc, #68]	; (8000980 <MX_SAI1_Init+0xc8>)
 800093a:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800093c:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_SAI1_Init+0xc0>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000942:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <MX_SAI1_Init+0xc0>)
 8000944:	2200      	movs	r2, #0
 8000946:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000948:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <MX_SAI1_Init+0xc0>)
 800094a:	2200      	movs	r2, #0
 800094c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800094e:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <MX_SAI1_Init+0xc0>)
 8000950:	2200      	movs	r2, #0
 8000952:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000954:	2302      	movs	r3, #2
 8000956:	2200      	movs	r2, #0
 8000958:	2100      	movs	r1, #0
 800095a:	4807      	ldr	r0, [pc, #28]	; (8000978 <MX_SAI1_Init+0xc0>)
 800095c:	f003 faf4 	bl	8003f48 <HAL_SAI_InitProtocol>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_SAI1_Init+0xb2>
  {
    Error_Handler();
 8000966:	f000 f941 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200006c4 	.word	0x200006c4
 8000974:	40015804 	.word	0x40015804
 8000978:	2000056c 	.word	0x2000056c
 800097c:	40015824 	.word	0x40015824
 8000980:	0002ee00 	.word	0x0002ee00

08000984 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8000988:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <MX_SPDIFRX_Init+0x5c>)
 800098a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800098e:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8000990:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <MX_SPDIFRX_Init+0x5c>)
 8000992:	2200      	movs	r2, #0
 8000994:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <MX_SPDIFRX_Init+0x5c>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 800099c:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <MX_SPDIFRX_Init+0x5c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_SPDIFRX_Init+0x5c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 80009a8:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <MX_SPDIFRX_Init+0x5c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_SPDIFRX_Init+0x5c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <MX_SPDIFRX_Init+0x5c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_SPDIFRX_Init+0x5c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <MX_SPDIFRX_Init+0x5c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_SPDIFRX_Init+0x5c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_SPDIFRX_Init+0x5c>)
 80009ce:	f003 fde1 	bl	8004594 <HAL_SPDIFRX_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 80009d8:	f000 f908 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000080 	.word	0x20000080

080009e4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_UART5_Init+0x4c>)
 80009ea:	4a12      	ldr	r2, [pc, #72]	; (8000a34 <MX_UART5_Init+0x50>)
 80009ec:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <MX_UART5_Init+0x4c>)
 80009f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_UART5_Init+0x4c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_UART5_Init+0x4c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <MX_UART5_Init+0x4c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_UART5_Init+0x4c>)
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <MX_UART5_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_UART5_Init+0x4c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_UART5_Init+0x4c>)
 8000a1c:	f003 fe16 	bl	800464c <HAL_UART_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000a26:	f000 f8e1 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200005f4 	.word	0x200005f4
 8000a34:	40005000 	.word	0x40005000

08000a38 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a3e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a42:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a46:	2206      	movs	r2, #6
 8000a48:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a4c:	2202      	movs	r2, #2
 8000a4e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a58:	2202      	movs	r2, #2
 8000a5a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a68:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a7a:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a7c:	f001 ff0d 	bl	800289a <HAL_PCD_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a86:	f000 f8b1 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200000cc 	.word	0x200000cc

08000a94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	; 0x28
 8000a98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
 8000aa8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	4b4b      	ldr	r3, [pc, #300]	; (8000bdc <MX_GPIO_Init+0x148>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a4a      	ldr	r2, [pc, #296]	; (8000bdc <MX_GPIO_Init+0x148>)
 8000ab4:	f043 0304 	orr.w	r3, r3, #4
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b48      	ldr	r3, [pc, #288]	; (8000bdc <MX_GPIO_Init+0x148>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0304 	and.w	r3, r3, #4
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	4b44      	ldr	r3, [pc, #272]	; (8000bdc <MX_GPIO_Init+0x148>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a43      	ldr	r2, [pc, #268]	; (8000bdc <MX_GPIO_Init+0x148>)
 8000ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b41      	ldr	r3, [pc, #260]	; (8000bdc <MX_GPIO_Init+0x148>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	4b3d      	ldr	r3, [pc, #244]	; (8000bdc <MX_GPIO_Init+0x148>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a3c      	ldr	r2, [pc, #240]	; (8000bdc <MX_GPIO_Init+0x148>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b3a      	ldr	r3, [pc, #232]	; (8000bdc <MX_GPIO_Init+0x148>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	4b36      	ldr	r3, [pc, #216]	; (8000bdc <MX_GPIO_Init+0x148>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a35      	ldr	r2, [pc, #212]	; (8000bdc <MX_GPIO_Init+0x148>)
 8000b08:	f043 0302 	orr.w	r3, r3, #2
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b33      	ldr	r3, [pc, #204]	; (8000bdc <MX_GPIO_Init+0x148>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	4b2f      	ldr	r3, [pc, #188]	; (8000bdc <MX_GPIO_Init+0x148>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a2e      	ldr	r2, [pc, #184]	; (8000bdc <MX_GPIO_Init+0x148>)
 8000b24:	f043 0308 	orr.w	r3, r3, #8
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b2c      	ldr	r3, [pc, #176]	; (8000bdc <MX_GPIO_Init+0x148>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0308 	and.w	r3, r3, #8
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC14_Pin|PC15_Pin|HDMI_TX_EN_Pin|HMI1_RED_Pin
 8000b36:	2200      	movs	r2, #0
 8000b38:	f64c 5104 	movw	r1, #52484	; 0xcd04
 8000b3c:	4828      	ldr	r0, [pc, #160]	; (8000be0 <MX_GPIO_Init+0x14c>)
 8000b3e:	f001 fb5d 	bl	80021fc <HAL_GPIO_WritePin>
                          |HMI2_GREEN_Pin|HMI2_RED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HDMI_HPD_EN_Pin|HDMI_5V_EN_Pin|HDMI_RX_RN_Pin, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2143      	movs	r1, #67	; 0x43
 8000b46:	4827      	ldr	r0, [pc, #156]	; (8000be4 <MX_GPIO_Init+0x150>)
 8000b48:	f001 fb58 	bl	80021fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SAI1_SD_A_PB2_Pin|HMI1_GREEN_Pin|HMI1_BLUE_Pin|CEC_PB6_Pin, GPIO_PIN_RESET);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f24c 0144 	movw	r1, #49220	; 0xc044
 8000b52:	4825      	ldr	r0, [pc, #148]	; (8000be8 <MX_GPIO_Init+0x154>)
 8000b54:	f001 fb52 	bl	80021fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14_Pin PC15_Pin HDMI_TX_EN_Pin HMI1_RED_Pin
                           HMI2_GREEN_Pin HMI2_RED_Pin */
  GPIO_InitStruct.Pin = PC14_Pin|PC15_Pin|HDMI_TX_EN_Pin|HMI1_RED_Pin
 8000b58:	f64c 5304 	movw	r3, #52484	; 0xcd04
 8000b5c:	617b      	str	r3, [r7, #20]
                          |HMI2_GREEN_Pin|HMI2_RED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	481b      	ldr	r0, [pc, #108]	; (8000be0 <MX_GPIO_Init+0x14c>)
 8000b72:	f001 f9b1 	bl	8001ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HDMI_HPD_EN_Pin HDMI_5V_EN_Pin HDMI_RX_RN_Pin */
  GPIO_InitStruct.Pin = HDMI_HPD_EN_Pin|HDMI_5V_EN_Pin|HDMI_RX_RN_Pin;
 8000b76:	2343      	movs	r3, #67	; 0x43
 8000b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4815      	ldr	r0, [pc, #84]	; (8000be4 <MX_GPIO_Init+0x150>)
 8000b8e:	f001 f9a3 	bl	8001ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_SD_A_PB2_Pin HMI1_GREEN_Pin HMI1_BLUE_Pin CEC_PB6_Pin */
  GPIO_InitStruct.Pin = SAI1_SD_A_PB2_Pin|HMI1_GREEN_Pin|HMI1_BLUE_Pin|CEC_PB6_Pin;
 8000b92:	f24c 0344 	movw	r3, #49220	; 0xc044
 8000b96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	480f      	ldr	r0, [pc, #60]	; (8000be8 <MX_GPIO_Init+0x154>)
 8000bac:	f001 f994 	bl	8001ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bc2:	2305      	movs	r3, #5
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4804      	ldr	r0, [pc, #16]	; (8000be0 <MX_GPIO_Init+0x14c>)
 8000bce:	f001 f983 	bl	8001ed8 <HAL_GPIO_Init>

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020800 	.word	0x40020800
 8000be4:	40020000 	.word	0x40020000
 8000be8:	40020400 	.word	0x40020400

08000bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <Error_Handler+0x6>

08000bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c02:	4a0f      	ldr	r2, [pc, #60]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c08:	6453      	str	r3, [r2, #68]	; 0x44
 8000c0a:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	603b      	str	r3, [r7, #0]
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	4a08      	ldr	r2, [pc, #32]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c24:	6413      	str	r3, [r2, #64]	; 0x40
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	40023800 	.word	0x40023800

08000c44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a17      	ldr	r2, [pc, #92]	; (8000cc0 <HAL_ADC_MspInit+0x7c>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d127      	bne.n	8000cb6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <HAL_ADC_MspInit+0x80>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6e:	4a15      	ldr	r2, [pc, #84]	; (8000cc4 <HAL_ADC_MspInit+0x80>)
 8000c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c74:	6453      	str	r3, [r2, #68]	; 0x44
 8000c76:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <HAL_ADC_MspInit+0x80>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <HAL_ADC_MspInit+0x80>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a0e      	ldr	r2, [pc, #56]	; (8000cc4 <HAL_ADC_MspInit+0x80>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <HAL_ADC_MspInit+0x80>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = HDMI_5V_IN_Pin|HDMI_HPD_IN_Pin;
 8000c9e:	230c      	movs	r3, #12
 8000ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <HAL_ADC_MspInit+0x84>)
 8000cb2:	f001 f911 	bl	8001ed8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cb6:	bf00      	nop
 8000cb8:	3728      	adds	r7, #40	; 0x28
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40012000 	.word	0x40012000
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40020000 	.word	0x40020000

08000ccc <HAL_CEC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcec: CEC handle pointer
* @retval None
*/
void HAL_CEC_MspInit(CEC_HandleTypeDef* hcec)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	; 0x28
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  if(hcec->Instance==CEC)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a1d      	ldr	r2, [pc, #116]	; (8000d60 <HAL_CEC_MspInit+0x94>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d134      	bne.n	8000d58 <HAL_CEC_MspInit+0x8c>
  {
  /* USER CODE BEGIN CEC_MspInit 0 */

  /* USER CODE END CEC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CEC_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	; (8000d64 <HAL_CEC_MspInit+0x98>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	4a1b      	ldr	r2, [pc, #108]	; (8000d64 <HAL_CEC_MspInit+0x98>)
 8000cf8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfe:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <HAL_CEC_MspInit+0x98>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <HAL_CEC_MspInit+0x98>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a14      	ldr	r2, [pc, #80]	; (8000d64 <HAL_CEC_MspInit+0x98>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <HAL_CEC_MspInit+0x98>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
    /**HDMI_CEC GPIO Configuration
    PA15     ------> CEC
    */
    GPIO_InitStruct.Pin = CEC_PA15_Pin;
 8000d26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d2c:	2312      	movs	r3, #18
 8000d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_CEC;
 8000d38:	2304      	movs	r3, #4
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CEC_PA15_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4619      	mov	r1, r3
 8000d42:	4809      	ldr	r0, [pc, #36]	; (8000d68 <HAL_CEC_MspInit+0x9c>)
 8000d44:	f001 f8c8 	bl	8001ed8 <HAL_GPIO_Init>

    /* CEC interrupt Init */
    HAL_NVIC_SetPriority(CEC_IRQn, 0, 0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	205d      	movs	r0, #93	; 0x5d
 8000d4e:	f001 f88c 	bl	8001e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_IRQn);
 8000d52:	205d      	movs	r0, #93	; 0x5d
 8000d54:	f001 f8a5 	bl	8001ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CEC_MspInit 1 */

  /* USER CODE END CEC_MspInit 1 */
  }

}
 8000d58:	bf00      	nop
 8000d5a:	3728      	adds	r7, #40	; 0x28
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40006c00 	.word	0x40006c00
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020000 	.word	0x40020000

08000d6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08c      	sub	sp, #48	; 0x30
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 031c 	add.w	r3, r7, #28
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a42      	ldr	r2, [pc, #264]	; (8000e94 <HAL_I2C_MspInit+0x128>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d12d      	bne.n	8000dea <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
 8000d92:	4b41      	ldr	r3, [pc, #260]	; (8000e98 <HAL_I2C_MspInit+0x12c>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a40      	ldr	r2, [pc, #256]	; (8000e98 <HAL_I2C_MspInit+0x12c>)
 8000d98:	f043 0302 	orr.w	r3, r3, #2
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b3e      	ldr	r3, [pc, #248]	; (8000e98 <HAL_I2C_MspInit+0x12c>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	61bb      	str	r3, [r7, #24]
 8000da8:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8000daa:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8000dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db0:	2312      	movs	r3, #18
 8000db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db4:	2301      	movs	r3, #1
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db8:	2303      	movs	r3, #3
 8000dba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000dbc:	2304      	movs	r3, #4
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc0:	f107 031c 	add.w	r3, r7, #28
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4835      	ldr	r0, [pc, #212]	; (8000e9c <HAL_I2C_MspInit+0x130>)
 8000dc8:	f001 f886 	bl	8001ed8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	4b31      	ldr	r3, [pc, #196]	; (8000e98 <HAL_I2C_MspInit+0x12c>)
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd4:	4a30      	ldr	r2, [pc, #192]	; (8000e98 <HAL_I2C_MspInit+0x12c>)
 8000dd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dda:	6413      	str	r3, [r2, #64]	; 0x40
 8000ddc:	4b2e      	ldr	r3, [pc, #184]	; (8000e98 <HAL_I2C_MspInit+0x12c>)
 8000dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000de4:	617b      	str	r3, [r7, #20]
 8000de6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000de8:	e04f      	b.n	8000e8a <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a2c      	ldr	r2, [pc, #176]	; (8000ea0 <HAL_I2C_MspInit+0x134>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d14a      	bne.n	8000e8a <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df4:	2300      	movs	r3, #0
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	4b27      	ldr	r3, [pc, #156]	; (8000e98 <HAL_I2C_MspInit+0x12c>)
 8000dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfc:	4a26      	ldr	r2, [pc, #152]	; (8000e98 <HAL_I2C_MspInit+0x12c>)
 8000dfe:	f043 0301 	orr.w	r3, r3, #1
 8000e02:	6313      	str	r3, [r2, #48]	; 0x30
 8000e04:	4b24      	ldr	r3, [pc, #144]	; (8000e98 <HAL_I2C_MspInit+0x12c>)
 8000e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	4b20      	ldr	r3, [pc, #128]	; (8000e98 <HAL_I2C_MspInit+0x12c>)
 8000e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e18:	4a1f      	ldr	r2, [pc, #124]	; (8000e98 <HAL_I2C_MspInit+0x12c>)
 8000e1a:	f043 0302 	orr.w	r3, r3, #2
 8000e1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e20:	4b1d      	ldr	r3, [pc, #116]	; (8000e98 <HAL_I2C_MspInit+0x12c>)
 8000e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e24:	f003 0302 	and.w	r3, r3, #2
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e32:	2312      	movs	r3, #18
 8000e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e36:	2301      	movs	r3, #1
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e3e:	2304      	movs	r3, #4
 8000e40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	f107 031c 	add.w	r3, r7, #28
 8000e46:	4619      	mov	r1, r3
 8000e48:	4816      	ldr	r0, [pc, #88]	; (8000ea4 <HAL_I2C_MspInit+0x138>)
 8000e4a:	f001 f845 	bl	8001ed8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e4e:	2310      	movs	r3, #16
 8000e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e52:	2312      	movs	r3, #18
 8000e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e56:	2301      	movs	r3, #1
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e5e:	2304      	movs	r3, #4
 8000e60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e62:	f107 031c 	add.w	r3, r7, #28
 8000e66:	4619      	mov	r1, r3
 8000e68:	480c      	ldr	r0, [pc, #48]	; (8000e9c <HAL_I2C_MspInit+0x130>)
 8000e6a:	f001 f835 	bl	8001ed8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <HAL_I2C_MspInit+0x12c>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	4a08      	ldr	r2, [pc, #32]	; (8000e98 <HAL_I2C_MspInit+0x12c>)
 8000e78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <HAL_I2C_MspInit+0x12c>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	68bb      	ldr	r3, [r7, #8]
}
 8000e8a:	bf00      	nop
 8000e8c:	3730      	adds	r7, #48	; 0x30
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40005800 	.word	0x40005800
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020400 	.word	0x40020400
 8000ea0:	40005c00 	.word	0x40005c00
 8000ea4:	40020000 	.word	0x40020000

08000ea8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	; 0x28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI1)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a28      	ldr	r2, [pc, #160]	; (8000f68 <HAL_I2S_MspInit+0xc0>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d149      	bne.n	8000f5e <HAL_I2S_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	4b27      	ldr	r3, [pc, #156]	; (8000f6c <HAL_I2S_MspInit+0xc4>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed2:	4a26      	ldr	r2, [pc, #152]	; (8000f6c <HAL_I2S_MspInit+0xc4>)
 8000ed4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eda:	4b24      	ldr	r3, [pc, #144]	; (8000f6c <HAL_I2S_MspInit+0xc4>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b20      	ldr	r3, [pc, #128]	; (8000f6c <HAL_I2S_MspInit+0xc4>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a1f      	ldr	r2, [pc, #124]	; (8000f6c <HAL_I2S_MspInit+0xc4>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <HAL_I2S_MspInit+0xc4>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <HAL_I2S_MspInit+0xc4>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a18      	ldr	r2, [pc, #96]	; (8000f6c <HAL_I2S_MspInit+0xc4>)
 8000f0c:	f043 0304 	orr.w	r3, r3, #4
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <HAL_I2S_MspInit+0xc4>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0304 	and.w	r3, r3, #4
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    PC4     ------> I2S1_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000f1e:	23b0      	movs	r3, #176	; 0xb0
 8000f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f2e:	2305      	movs	r3, #5
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	4619      	mov	r1, r3
 8000f38:	480d      	ldr	r0, [pc, #52]	; (8000f70 <HAL_I2S_MspInit+0xc8>)
 8000f3a:	f000 ffcd 	bl	8001ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f3e:	2310      	movs	r3, #16
 8000f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f4e:	2305      	movs	r3, #5
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	4806      	ldr	r0, [pc, #24]	; (8000f74 <HAL_I2S_MspInit+0xcc>)
 8000f5a:	f000 ffbd 	bl	8001ed8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f5e:	bf00      	nop
 8000f60:	3728      	adds	r7, #40	; 0x28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40013000 	.word	0x40013000
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020000 	.word	0x40020000
 8000f74:	40020800 	.word	0x40020800

08000f78 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	; 0x28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8000f98:	d159      	bne.n	800104e <HAL_SPDIFRX_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	4b2e      	ldr	r3, [pc, #184]	; (8001058 <HAL_SPDIFRX_MspInit+0xe0>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	4a2d      	ldr	r2, [pc, #180]	; (8001058 <HAL_SPDIFRX_MspInit+0xe0>)
 8000fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000faa:	4b2b      	ldr	r3, [pc, #172]	; (8001058 <HAL_SPDIFRX_MspInit+0xe0>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b27      	ldr	r3, [pc, #156]	; (8001058 <HAL_SPDIFRX_MspInit+0xe0>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a26      	ldr	r2, [pc, #152]	; (8001058 <HAL_SPDIFRX_MspInit+0xe0>)
 8000fc0:	f043 0304 	orr.w	r3, r3, #4
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b24      	ldr	r3, [pc, #144]	; (8001058 <HAL_SPDIFRX_MspInit+0xe0>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0304 	and.w	r3, r3, #4
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	4b20      	ldr	r3, [pc, #128]	; (8001058 <HAL_SPDIFRX_MspInit+0xe0>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a1f      	ldr	r2, [pc, #124]	; (8001058 <HAL_SPDIFRX_MspInit+0xe0>)
 8000fdc:	f043 0302 	orr.w	r3, r3, #2
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <HAL_SPDIFRX_MspInit+0xe0>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PC5     ------> SPDIFRX_IN3
    PC7     ------> SPDIFRX_IN1
    PB7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fee:	2320      	movs	r3, #32
 8000ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000ffe:	2308      	movs	r3, #8
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	4619      	mov	r1, r3
 8001008:	4814      	ldr	r0, [pc, #80]	; (800105c <HAL_SPDIFRX_MspInit+0xe4>)
 800100a:	f000 ff65 	bl	8001ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800100e:	2380      	movs	r3, #128	; 0x80
 8001010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 800101e:	2307      	movs	r3, #7
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	4619      	mov	r1, r3
 8001028:	480c      	ldr	r0, [pc, #48]	; (800105c <HAL_SPDIFRX_MspInit+0xe4>)
 800102a:	f000 ff55 	bl	8001ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800102e:	2380      	movs	r3, #128	; 0x80
 8001030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2300      	movs	r3, #0
 800103c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800103e:	2308      	movs	r3, #8
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	4619      	mov	r1, r3
 8001048:	4805      	ldr	r0, [pc, #20]	; (8001060 <HAL_SPDIFRX_MspInit+0xe8>)
 800104a:	f000 ff45 	bl	8001ed8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 800104e:	bf00      	nop
 8001050:	3728      	adds	r7, #40	; 0x28
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800
 800105c:	40020800 	.word	0x40020800
 8001060:	40020400 	.word	0x40020400

08001064 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	; 0x28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a28      	ldr	r2, [pc, #160]	; (8001124 <HAL_UART_MspInit+0xc0>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d14a      	bne.n	800111c <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	4b27      	ldr	r3, [pc, #156]	; (8001128 <HAL_UART_MspInit+0xc4>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	4a26      	ldr	r2, [pc, #152]	; (8001128 <HAL_UART_MspInit+0xc4>)
 8001090:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001094:	6413      	str	r3, [r2, #64]	; 0x40
 8001096:	4b24      	ldr	r3, [pc, #144]	; (8001128 <HAL_UART_MspInit+0xc4>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b20      	ldr	r3, [pc, #128]	; (8001128 <HAL_UART_MspInit+0xc4>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a1f      	ldr	r2, [pc, #124]	; (8001128 <HAL_UART_MspInit+0xc4>)
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <HAL_UART_MspInit+0xc4>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	4b19      	ldr	r3, [pc, #100]	; (8001128 <HAL_UART_MspInit+0xc4>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a18      	ldr	r2, [pc, #96]	; (8001128 <HAL_UART_MspInit+0xc4>)
 80010c8:	f043 0308 	orr.w	r3, r3, #8
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b16      	ldr	r3, [pc, #88]	; (8001128 <HAL_UART_MspInit+0xc4>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0308 	and.w	r3, r3, #8
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80010da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e0:	2302      	movs	r3, #2
 80010e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010e4:	2301      	movs	r3, #1
 80010e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e8:	2303      	movs	r3, #3
 80010ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80010ec:	2308      	movs	r3, #8
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	4619      	mov	r1, r3
 80010f6:	480d      	ldr	r0, [pc, #52]	; (800112c <HAL_UART_MspInit+0xc8>)
 80010f8:	f000 feee 	bl	8001ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010fc:	2304      	movs	r3, #4
 80010fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001100:	2302      	movs	r3, #2
 8001102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001104:	2301      	movs	r3, #1
 8001106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001108:	2303      	movs	r3, #3
 800110a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800110c:	2308      	movs	r3, #8
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4619      	mov	r1, r3
 8001116:	4806      	ldr	r0, [pc, #24]	; (8001130 <HAL_UART_MspInit+0xcc>)
 8001118:	f000 fede 	bl	8001ed8 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 800111c:	bf00      	nop
 800111e:	3728      	adds	r7, #40	; 0x28
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40005000 	.word	0x40005000
 8001128:	40023800 	.word	0x40023800
 800112c:	40020800 	.word	0x40020800
 8001130:	40020c00 	.word	0x40020c00

08001134 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	; 0x28
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001154:	d132      	bne.n	80011bc <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <HAL_PCD_MspInit+0x90>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a19      	ldr	r2, [pc, #100]	; (80011c4 <HAL_PCD_MspInit+0x90>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <HAL_PCD_MspInit+0x90>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001172:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	2302      	movs	r3, #2
 800117a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001180:	2303      	movs	r3, #3
 8001182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001184:	230a      	movs	r3, #10
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	4619      	mov	r1, r3
 800118e:	480e      	ldr	r0, [pc, #56]	; (80011c8 <HAL_PCD_MspInit+0x94>)
 8001190:	f000 fea2 	bl	8001ed8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <HAL_PCD_MspInit+0x90>)
 8001196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001198:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <HAL_PCD_MspInit+0x90>)
 800119a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800119e:	6353      	str	r3, [r2, #52]	; 0x34
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <HAL_PCD_MspInit+0x90>)
 80011a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a8:	4a06      	ldr	r2, [pc, #24]	; (80011c4 <HAL_PCD_MspInit+0x90>)
 80011aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ae:	6453      	str	r3, [r2, #68]	; 0x44
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <HAL_PCD_MspInit+0x90>)
 80011b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80011bc:	bf00      	nop
 80011be:	3728      	adds	r7, #40	; 0x28
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020000 	.word	0x40020000

080011cc <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	; 0x28
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a3d      	ldr	r2, [pc, #244]	; (80012d0 <HAL_SAI_MspInit+0x104>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d126      	bne.n	800122c <HAL_SAI_MspInit+0x60>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80011de:	4b3d      	ldr	r3, [pc, #244]	; (80012d4 <HAL_SAI_MspInit+0x108>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d10d      	bne.n	8001202 <HAL_SAI_MspInit+0x36>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	4b3b      	ldr	r3, [pc, #236]	; (80012d8 <HAL_SAI_MspInit+0x10c>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	4a3a      	ldr	r2, [pc, #232]	; (80012d8 <HAL_SAI_MspInit+0x10c>)
 80011f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011f4:	6453      	str	r3, [r2, #68]	; 0x44
 80011f6:	4b38      	ldr	r3, [pc, #224]	; (80012d8 <HAL_SAI_MspInit+0x10c>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001202:	4b34      	ldr	r3, [pc, #208]	; (80012d4 <HAL_SAI_MspInit+0x108>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	3301      	adds	r3, #1
 8001208:	4a32      	ldr	r2, [pc, #200]	; (80012d4 <HAL_SAI_MspInit+0x108>)
 800120a:	6013      	str	r3, [r2, #0]

    /**SAI1_A_Block_A GPIO Configuration
    PC1     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = SAI1_SD_A_PC1_Pin;
 800120c:	2302      	movs	r3, #2
 800120e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001210:	2302      	movs	r3, #2
 8001212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2300      	movs	r3, #0
 800121a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800121c:	2306      	movs	r3, #6
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SD_A_PC1_GPIO_Port, &GPIO_InitStruct);
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	4619      	mov	r1, r3
 8001226:	482d      	ldr	r0, [pc, #180]	; (80012dc <HAL_SAI_MspInit+0x110>)
 8001228:	f000 fe56 	bl	8001ed8 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a2b      	ldr	r2, [pc, #172]	; (80012e0 <HAL_SAI_MspInit+0x114>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d148      	bne.n	80012c8 <HAL_SAI_MspInit+0xfc>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8001236:	4b27      	ldr	r3, [pc, #156]	; (80012d4 <HAL_SAI_MspInit+0x108>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10d      	bne.n	800125a <HAL_SAI_MspInit+0x8e>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	4b25      	ldr	r3, [pc, #148]	; (80012d8 <HAL_SAI_MspInit+0x10c>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	4a24      	ldr	r2, [pc, #144]	; (80012d8 <HAL_SAI_MspInit+0x10c>)
 8001248:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800124c:	6453      	str	r3, [r2, #68]	; 0x44
 800124e:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <HAL_SAI_MspInit+0x10c>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800125a:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <HAL_SAI_MspInit+0x108>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	3301      	adds	r3, #1
 8001260:	4a1c      	ldr	r2, [pc, #112]	; (80012d4 <HAL_SAI_MspInit+0x108>)
 8001262:	6013      	str	r3, [r2, #0]
    PC0     ------> SAI1_MCLK_B
    PB12     ------> SAI1_SCK_B
    PA9     ------> SAI1_SD_B
    PB9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001264:	2301      	movs	r3, #1
 8001266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001270:	2300      	movs	r3, #0
 8001272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001274:	2306      	movs	r3, #6
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	4619      	mov	r1, r3
 800127e:	4817      	ldr	r0, [pc, #92]	; (80012dc <HAL_SAI_MspInit+0x110>)
 8001280:	f000 fe2a 	bl	8001ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_9;
 8001284:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	2302      	movs	r3, #2
 800128c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	2300      	movs	r3, #0
 8001294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001296:	2306      	movs	r3, #6
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	4619      	mov	r1, r3
 80012a0:	4810      	ldr	r0, [pc, #64]	; (80012e4 <HAL_SAI_MspInit+0x118>)
 80012a2:	f000 fe19 	bl	8001ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	2302      	movs	r3, #2
 80012ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	2300      	movs	r3, #0
 80012b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80012b8:	2306      	movs	r3, #6
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4619      	mov	r1, r3
 80012c2:	4809      	ldr	r0, [pc, #36]	; (80012e8 <HAL_SAI_MspInit+0x11c>)
 80012c4:	f000 fe08 	bl	8001ed8 <HAL_GPIO_Init>

    }
}
 80012c8:	bf00      	nop
 80012ca:	3728      	adds	r7, #40	; 0x28
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40015804 	.word	0x40015804
 80012d4:	20000028 	.word	0x20000028
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40020800 	.word	0x40020800
 80012e0:	40015824 	.word	0x40015824
 80012e4:	40020400 	.word	0x40020400
 80012e8:	40020000 	.word	0x40020000

080012ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <NMI_Handler+0x4>

080012f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <HardFault_Handler+0x4>

080012f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <MemManage_Handler+0x4>

080012fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001302:	e7fe      	b.n	8001302 <BusFault_Handler+0x4>

08001304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <UsageFault_Handler+0x4>

0800130a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001338:	f000 f89e 	bl	8001478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}

08001340 <CEC_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC global interrupt.
  */
void CEC_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_IRQn 0 */

  /* USER CODE END CEC_IRQn 0 */
  HAL_CEC_IRQHandler(&hcec);
 8001344:	4802      	ldr	r0, [pc, #8]	; (8001350 <CEC_IRQHandler+0x10>)
 8001346:	f000 fbad 	bl	8001aa4 <HAL_CEC_IRQHandler>
  /* USER CODE BEGIN CEC_IRQn 1 */

  /* USER CODE END CEC_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000528 	.word	0x20000528

08001354 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001358:	4b08      	ldr	r3, [pc, #32]	; (800137c <SystemInit+0x28>)
 800135a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800135e:	4a07      	ldr	r2, [pc, #28]	; (800137c <SystemInit+0x28>)
 8001360:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001364:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <SystemInit+0x28>)
 800136a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800136e:	609a      	str	r2, [r3, #8]
#endif
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001380:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001384:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001386:	e003      	b.n	8001390 <LoopCopyDataInit>

08001388 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001388:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800138a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800138c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800138e:	3104      	adds	r1, #4

08001390 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001390:	480b      	ldr	r0, [pc, #44]	; (80013c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001392:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001394:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001396:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001398:	d3f6      	bcc.n	8001388 <CopyDataInit>
  ldr  r2, =_sbss
 800139a:	4a0b      	ldr	r2, [pc, #44]	; (80013c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800139c:	e002      	b.n	80013a4 <LoopFillZerobss>

0800139e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800139e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80013a0:	f842 3b04 	str.w	r3, [r2], #4

080013a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80013a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80013a8:	d3f9      	bcc.n	800139e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013aa:	f7ff ffd3 	bl	8001354 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ae:	f003 ffc7 	bl	8005340 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013b2:	f7ff f8a7 	bl	8000504 <main>
  bx  lr    
 80013b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013b8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80013bc:	080053d8 	.word	0x080053d8
  ldr  r0, =_sdata
 80013c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80013c4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80013c8:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80013cc:	20000760 	.word	0x20000760

080013d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013d0:	e7fe      	b.n	80013d0 <ADC_IRQHandler>
	...

080013d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013d8:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <HAL_Init+0x40>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a0d      	ldr	r2, [pc, #52]	; (8001414 <HAL_Init+0x40>)
 80013de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013e4:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <HAL_Init+0x40>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <HAL_Init+0x40>)
 80013ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <HAL_Init+0x40>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a07      	ldr	r2, [pc, #28]	; (8001414 <HAL_Init+0x40>)
 80013f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013fc:	2003      	movs	r0, #3
 80013fe:	f000 fd29 	bl	8001e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001402:	2000      	movs	r0, #0
 8001404:	f000 f808 	bl	8001418 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001408:	f7ff fbf4 	bl	8000bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40023c00 	.word	0x40023c00

08001418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001420:	4b12      	ldr	r3, [pc, #72]	; (800146c <HAL_InitTick+0x54>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <HAL_InitTick+0x58>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	4619      	mov	r1, r3
 800142a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001432:	fbb2 f3f3 	udiv	r3, r2, r3
 8001436:	4618      	mov	r0, r3
 8001438:	f000 fd41 	bl	8001ebe <HAL_SYSTICK_Config>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e00e      	b.n	8001464 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b0f      	cmp	r3, #15
 800144a:	d80a      	bhi.n	8001462 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800144c:	2200      	movs	r2, #0
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001454:	f000 fd09 	bl	8001e6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001458:	4a06      	ldr	r2, [pc, #24]	; (8001474 <HAL_InitTick+0x5c>)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	e000      	b.n	8001464 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
}
 8001464:	4618      	mov	r0, r3
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000000 	.word	0x20000000
 8001470:	20000008 	.word	0x20000008
 8001474:	20000004 	.word	0x20000004

08001478 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_IncTick+0x20>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	461a      	mov	r2, r3
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_IncTick+0x24>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4413      	add	r3, r2
 8001488:	4a04      	ldr	r2, [pc, #16]	; (800149c <HAL_IncTick+0x24>)
 800148a:	6013      	str	r3, [r2, #0]
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	20000008 	.word	0x20000008
 800149c:	2000075c 	.word	0x2000075c

080014a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  return uwTick;
 80014a4:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <HAL_GetTick+0x14>)
 80014a6:	681b      	ldr	r3, [r3, #0]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	2000075c 	.word	0x2000075c

080014b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014c0:	f7ff ffee 	bl	80014a0 <HAL_GetTick>
 80014c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014d0:	d005      	beq.n	80014de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <HAL_Delay+0x40>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	461a      	mov	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4413      	add	r3, r2
 80014dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014de:	bf00      	nop
 80014e0:	f7ff ffde 	bl	80014a0 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d8f7      	bhi.n	80014e0 <HAL_Delay+0x28>
  {
  }
}
 80014f0:	bf00      	nop
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000008 	.word	0x20000008

080014fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001504:	2300      	movs	r3, #0
 8001506:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e033      	b.n	800157a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	2b00      	cmp	r3, #0
 8001518:	d109      	bne.n	800152e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff fb92 	bl	8000c44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	f003 0310 	and.w	r3, r3, #16
 8001536:	2b00      	cmp	r3, #0
 8001538:	d118      	bne.n	800156c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001542:	f023 0302 	bic.w	r3, r3, #2
 8001546:	f043 0202 	orr.w	r2, r3, #2
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f000 f94a 	bl	80017e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f023 0303 	bic.w	r3, r3, #3
 8001562:	f043 0201 	orr.w	r2, r3, #1
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	641a      	str	r2, [r3, #64]	; 0x40
 800156a:	e001      	b.n	8001570 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001578:	7bfb      	ldrb	r3, [r7, #15]
}
 800157a:	4618      	mov	r0, r3
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800158e:	2300      	movs	r3, #0
 8001590:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001598:	2b01      	cmp	r3, #1
 800159a:	d101      	bne.n	80015a0 <HAL_ADC_ConfigChannel+0x1c>
 800159c:	2302      	movs	r3, #2
 800159e:	e113      	b.n	80017c8 <HAL_ADC_ConfigChannel+0x244>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2201      	movs	r2, #1
 80015a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b09      	cmp	r3, #9
 80015ae:	d925      	bls.n	80015fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	68d9      	ldr	r1, [r3, #12]
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	461a      	mov	r2, r3
 80015be:	4613      	mov	r3, r2
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	4413      	add	r3, r2
 80015c4:	3b1e      	subs	r3, #30
 80015c6:	2207      	movs	r2, #7
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43da      	mvns	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	400a      	ands	r2, r1
 80015d4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68d9      	ldr	r1, [r3, #12]
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	4618      	mov	r0, r3
 80015e8:	4603      	mov	r3, r0
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4403      	add	r3, r0
 80015ee:	3b1e      	subs	r3, #30
 80015f0:	409a      	lsls	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	e022      	b.n	8001642 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6919      	ldr	r1, [r3, #16]
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	b29b      	uxth	r3, r3
 8001608:	461a      	mov	r2, r3
 800160a:	4613      	mov	r3, r2
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	4413      	add	r3, r2
 8001610:	2207      	movs	r2, #7
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43da      	mvns	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	400a      	ands	r2, r1
 800161e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6919      	ldr	r1, [r3, #16]
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	b29b      	uxth	r3, r3
 8001630:	4618      	mov	r0, r3
 8001632:	4603      	mov	r3, r0
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	4403      	add	r3, r0
 8001638:	409a      	lsls	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b06      	cmp	r3, #6
 8001648:	d824      	bhi.n	8001694 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	4613      	mov	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4413      	add	r3, r2
 800165a:	3b05      	subs	r3, #5
 800165c:	221f      	movs	r2, #31
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43da      	mvns	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	400a      	ands	r2, r1
 800166a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	b29b      	uxth	r3, r3
 8001678:	4618      	mov	r0, r3
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	3b05      	subs	r3, #5
 8001686:	fa00 f203 	lsl.w	r2, r0, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	430a      	orrs	r2, r1
 8001690:	635a      	str	r2, [r3, #52]	; 0x34
 8001692:	e04c      	b.n	800172e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b0c      	cmp	r3, #12
 800169a:	d824      	bhi.n	80016e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	3b23      	subs	r3, #35	; 0x23
 80016ae:	221f      	movs	r2, #31
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43da      	mvns	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	400a      	ands	r2, r1
 80016bc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	4618      	mov	r0, r3
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	4613      	mov	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	3b23      	subs	r3, #35	; 0x23
 80016d8:	fa00 f203 	lsl.w	r2, r0, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	430a      	orrs	r2, r1
 80016e2:	631a      	str	r2, [r3, #48]	; 0x30
 80016e4:	e023      	b.n	800172e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	3b41      	subs	r3, #65	; 0x41
 80016f8:	221f      	movs	r2, #31
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43da      	mvns	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	400a      	ands	r2, r1
 8001706:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	b29b      	uxth	r3, r3
 8001714:	4618      	mov	r0, r3
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	3b41      	subs	r3, #65	; 0x41
 8001722:	fa00 f203 	lsl.w	r2, r0, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	430a      	orrs	r2, r1
 800172c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800172e:	4b29      	ldr	r3, [pc, #164]	; (80017d4 <HAL_ADC_ConfigChannel+0x250>)
 8001730:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a28      	ldr	r2, [pc, #160]	; (80017d8 <HAL_ADC_ConfigChannel+0x254>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d10f      	bne.n	800175c <HAL_ADC_ConfigChannel+0x1d8>
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b12      	cmp	r3, #18
 8001742:	d10b      	bne.n	800175c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a1d      	ldr	r2, [pc, #116]	; (80017d8 <HAL_ADC_ConfigChannel+0x254>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d12b      	bne.n	80017be <HAL_ADC_ConfigChannel+0x23a>
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a1c      	ldr	r2, [pc, #112]	; (80017dc <HAL_ADC_ConfigChannel+0x258>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d003      	beq.n	8001778 <HAL_ADC_ConfigChannel+0x1f4>
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b11      	cmp	r3, #17
 8001776:	d122      	bne.n	80017be <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a11      	ldr	r2, [pc, #68]	; (80017dc <HAL_ADC_ConfigChannel+0x258>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d111      	bne.n	80017be <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800179a:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <HAL_ADC_ConfigChannel+0x25c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a11      	ldr	r2, [pc, #68]	; (80017e4 <HAL_ADC_ConfigChannel+0x260>)
 80017a0:	fba2 2303 	umull	r2, r3, r2, r3
 80017a4:	0c9a      	lsrs	r2, r3, #18
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017b0:	e002      	b.n	80017b8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	3b01      	subs	r3, #1
 80017b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f9      	bne.n	80017b2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	40012300 	.word	0x40012300
 80017d8:	40012000 	.word	0x40012000
 80017dc:	10000012 	.word	0x10000012
 80017e0:	20000000 	.word	0x20000000
 80017e4:	431bde83 	.word	0x431bde83

080017e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017f0:	4b79      	ldr	r3, [pc, #484]	; (80019d8 <ADC_Init+0x1f0>)
 80017f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	431a      	orrs	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800181c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6859      	ldr	r1, [r3, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	021a      	lsls	r2, r3, #8
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	430a      	orrs	r2, r1
 8001830:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001840:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6859      	ldr	r1, [r3, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	430a      	orrs	r2, r1
 8001852:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689a      	ldr	r2, [r3, #8]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001862:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6899      	ldr	r1, [r3, #8]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68da      	ldr	r2, [r3, #12]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	430a      	orrs	r2, r1
 8001874:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187a:	4a58      	ldr	r2, [pc, #352]	; (80019dc <ADC_Init+0x1f4>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d022      	beq.n	80018c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800188e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6899      	ldr	r1, [r3, #8]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	430a      	orrs	r2, r1
 80018a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6899      	ldr	r1, [r3, #8]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	e00f      	b.n	80018e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 0202 	bic.w	r2, r2, #2
 80018f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6899      	ldr	r1, [r3, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	7e1b      	ldrb	r3, [r3, #24]
 8001900:	005a      	lsls	r2, r3, #1
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	430a      	orrs	r2, r1
 8001908:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d01b      	beq.n	800194c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001922:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001932:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6859      	ldr	r1, [r3, #4]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193e:	3b01      	subs	r3, #1
 8001940:	035a      	lsls	r2, r3, #13
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	430a      	orrs	r2, r1
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	e007      	b.n	800195c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800195a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800196a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	3b01      	subs	r3, #1
 8001978:	051a      	lsls	r2, r3, #20
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	430a      	orrs	r2, r1
 8001980:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001990:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6899      	ldr	r1, [r3, #8]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800199e:	025a      	lsls	r2, r3, #9
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	430a      	orrs	r2, r1
 80019a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6899      	ldr	r1, [r3, #8]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	029a      	lsls	r2, r3, #10
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	609a      	str	r2, [r3, #8]
}
 80019cc:	bf00      	nop
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	40012300 	.word	0x40012300
 80019dc:	0f000001 	.word	0x0f000001

080019e0 <HAL_CEC_Init>:
  *         parameters in the CEC_InitTypeDef and creates the associated handle .
  * @param hcec CEC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CEC_Init(CEC_HandleTypeDef *hcec)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Check the CEC handle allocation */
  if ((hcec == NULL) || (hcec->Init.RxBuffer == NULL))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_CEC_Init+0x16>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_CEC_Init+0x1a>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e050      	b.n	8001a9c <HAL_CEC_Init+0xbc>

    /* Init the low level hardware */
    hcec->MspInitCallback(hcec);
  }
#else
  if (hcec->gState == HAL_CEC_STATE_RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d106      	bne.n	8001a10 <HAL_CEC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hcec->Lock = HAL_UNLOCKED;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_CEC_MspInit(hcec);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff f95e 	bl	8000ccc <HAL_CEC_MspInit>
  }
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */

  hcec->gState = HAL_CEC_STATE_BUSY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2224      	movs	r2, #36	; 0x24
 8001a14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable the Peripheral */
  __HAL_CEC_DISABLE(hcec);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0201 	bic.w	r2, r2, #1
 8001a24:	601a      	str	r2, [r3, #0]

  /* Write to CEC Control Register */
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | hcec->Init.BroadcastMsgNoErrorBitGen | \
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	691b      	ldr	r3, [r3, #16]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8001a3a:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | hcec->Init.BroadcastMsgNoErrorBitGen | \
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	431a      	orrs	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69db      	ldr	r3, [r3, #28]
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | hcec->Init.BroadcastMsgNoErrorBitGen | \
 8001a4c:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001a52:	041b      	lsls	r3, r3, #16
 8001a54:	ea42 0103 	orr.w	r1, r2, r3
                         hcec->Init.ListenMode;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a1a      	ldr	r2, [r3, #32]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8001a60:	430a      	orrs	r2, r1
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8001a62:	605a      	str	r2, [r3, #4]
    * End of Transmission IT
    * Tx Missing Acknowledge IT
    * Tx-Error IT
    * Tx-Buffer Underrun IT
    * Tx arbitration lost   */
  __HAL_CEC_ENABLE_IT(hcec, CEC_IT_RXBR | CEC_IT_RXEND | CEC_IER_RX_ALL_ERR | CEC_IT_TXBR | CEC_IT_TXEND |
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6812      	ldr	r2, [r2, #0]
 8001a6e:	ea6f 3353 	mvn.w	r3, r3, lsr #13
 8001a72:	ea6f 3343 	mvn.w	r3, r3, lsl #13
 8001a76:	6153      	str	r3, [r2, #20]
                      CEC_IER_TX_ALL_ERR);

  /* Enable the CEC Peripheral */
  __HAL_CEC_ENABLE(hcec);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f042 0201 	orr.w	r2, r2, #1
 8001a86:	601a      	str	r2, [r3, #0]

  hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	641a      	str	r2, [r3, #64]	; 0x40
  hcec->gState = HAL_CEC_STATE_READY;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2220      	movs	r2, #32
 8001a92:	639a      	str	r2, [r3, #56]	; 0x38
  hcec->RxState = HAL_CEC_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2220      	movs	r2, #32
 8001a98:	63da      	str	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_CEC_IRQHandler>:
  * @brief This function handles CEC interrupt requests.
  * @param hcec CEC handle
  * @retval None
  */
void HAL_CEC_IRQHandler(CEC_HandleTypeDef *hcec)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]

  /* save interrupts register for further error or interrupts handling purposes */
  uint32_t reg;
  reg = hcec->Instance->ISR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	60fb      	str	r3, [r7, #12]


  /* ----------------------------Arbitration Lost Management----------------------------------*/
  /* CEC TX arbitration error interrupt occurred --------------------------------------*/
  if ((reg & CEC_FLAG_ARBLST) != 0U)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00a      	beq.n	8001ad4 <HAL_CEC_IRQHandler+0x30>
  {
    hcec->ErrorCode = HAL_CEC_ERROR_ARBLST;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2280      	movs	r2, #128	; 0x80
 8001ac2:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_ARBLST);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	691a      	ldr	r2, [r3, #16]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ad2:	611a      	str	r2, [r3, #16]
  }

  /* ----------------------------Rx Management----------------------------------*/
  /* CEC RX byte received interrupt  ---------------------------------------------------*/
  if ((reg & CEC_FLAG_RXBR) != 0U)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d01c      	beq.n	8001b18 <HAL_CEC_IRQHandler+0x74>
  {
    /* reception is starting */
    hcec->RxState = HAL_CEC_STATE_BUSY_RX;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2222      	movs	r2, #34	; 0x22
 8001ae2:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->RxXferSize++;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ae8:	3301      	adds	r3, #1
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	865a      	strh	r2, [r3, #50]	; 0x32
    /* read received byte */
    *hcec->Init.RxBuffer = (uint8_t) hcec->Instance->RXDR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68da      	ldr	r2, [r3, #12]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	701a      	strb	r2, [r3, #0]
    hcec->Init.RxBuffer++;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b02:	1c5a      	adds	r2, r3, #1
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXBR);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	691a      	ldr	r2, [r3, #16]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f042 0201 	orr.w	r2, r2, #1
 8001b16:	611a      	str	r2, [r3, #16]
  }

  /* CEC RX end received interrupt  ---------------------------------------------------*/
  if ((reg & CEC_FLAG_RXEND) != 0U)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d01e      	beq.n	8001b60 <HAL_CEC_IRQHandler+0xbc>
  {
    /* clear IT */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXEND);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	691a      	ldr	r2, [r3, #16]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f042 0202 	orr.w	r2, r2, #2
 8001b30:	611a      	str	r2, [r3, #16]

    /* Rx process is completed, restore hcec->RxState to Ready */
    hcec->RxState = HAL_CEC_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2220      	movs	r2, #32
 8001b36:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	641a      	str	r2, [r3, #64]	; 0x40
    hcec->Init.RxBuffer -= hcec->RxXferSize;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001b46:	425b      	negs	r3, r3
 8001b48:	441a      	add	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->RxCpltCallback(hcec, hcec->RxXferSize);
#else
    HAL_CEC_RxCpltCallback(hcec, hcec->RxXferSize);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001b52:	4619      	mov	r1, r3
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 f898 	bl	8001c8a <HAL_CEC_RxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
    hcec->RxXferSize = 0U;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* ----------------------------Tx Management----------------------------------*/
  /* CEC TX byte request interrupt ------------------------------------------------*/
  if ((reg & CEC_FLAG_TXBR) != 0U)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d030      	beq.n	8001bcc <HAL_CEC_IRQHandler+0x128>
  {
    if (hcec->TxXferCount == 0U)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d113      	bne.n	8001b9a <HAL_CEC_IRQHandler+0xf6>
    {
      /* if this is the last byte transmission, set TX End of Message (TXEOM) bit */
      __HAL_CEC_LAST_BYTE_TX_SET(hcec);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f042 0204 	orr.w	r2, r2, #4
 8001b80:	601a      	str	r2, [r3, #0]
      hcec->Instance->TXDR = *hcec->pTxBuffPtr;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b86:	781a      	ldrb	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	609a      	str	r2, [r3, #8]
      hcec->pTxBuffPtr++;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b92:	1c5a      	adds	r2, r3, #1
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b98:	e010      	b.n	8001bbc <HAL_CEC_IRQHandler+0x118>
    }
    else
    {
      hcec->Instance->TXDR = *hcec->pTxBuffPtr;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9e:	781a      	ldrb	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	609a      	str	r2, [r3, #8]
      hcec->pTxBuffPtr++;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	62da      	str	r2, [r3, #44]	; 0x2c
      hcec->TxXferCount--;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	861a      	strh	r2, [r3, #48]	; 0x30
    }
    /* clear Tx-Byte request flag */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXBR);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	691a      	ldr	r2, [r3, #16]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bca:	611a      	str	r2, [r3, #16]
  }

  /* CEC TX end interrupt ------------------------------------------------*/
  if ((reg & CEC_FLAG_TXEND) != 0U)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d014      	beq.n	8001c00 <HAL_CEC_IRQHandler+0x15c>
  {
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXEND);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	691a      	ldr	r2, [r3, #16]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001be4:	611a      	str	r2, [r3, #16]

    /* Tx process is ended, restore hcec->gState to Ready */
    hcec->gState = HAL_CEC_STATE_READY;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2220      	movs	r2, #32
 8001bea:	639a      	str	r2, [r3, #56]	; 0x38
    /* Call the Process Unlocked before calling the Tx call back API to give the possibility to
    start again the Transmission under the Tx call back API */
    __HAL_UNLOCK(hcec);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->TxCpltCallback(hcec);
#else
    HAL_CEC_TxCpltCallback(hcec);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f83b 	bl	8001c76 <HAL_CEC_TxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
  }

  /* ----------------------------Rx/Tx Error Management----------------------------------*/
  if ((reg & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE | CEC_ISR_TXUDR | CEC_ISR_TXERR |
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	f641 437c 	movw	r3, #7292	; 0x1c7c
 8001c06:	4013      	ands	r3, r2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d030      	beq.n	8001c6e <HAL_CEC_IRQHandler+0x1ca>
              CEC_ISR_TXACKE)) != 0U)
  {
    hcec->ErrorCode = reg;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, HAL_CEC_ERROR_RXOVR | HAL_CEC_ERROR_BRE | CEC_FLAG_LBPE | CEC_FLAG_SBPE |
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	f443 53e3 	orr.w	r3, r3, #7264	; 0x1c60
 8001c20:	f043 031c 	orr.w	r3, r3, #28
 8001c24:	6113      	str	r3, [r2, #16]
                         HAL_CEC_ERROR_RXACKE | HAL_CEC_ERROR_TXUDR | HAL_CEC_ERROR_TXERR | HAL_CEC_ERROR_TXACKE);


    if ((reg & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE)) != 0U)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d00e      	beq.n	8001c4e <HAL_CEC_IRQHandler+0x1aa>
    {
      hcec->Init.RxBuffer -= hcec->RxXferSize;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001c38:	425b      	negs	r3, r3
 8001c3a:	441a      	add	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	629a      	str	r2, [r3, #40]	; 0x28
      hcec->RxXferSize = 0U;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	865a      	strh	r2, [r3, #50]	; 0x32
      hcec->RxState = HAL_CEC_STATE_READY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2220      	movs	r2, #32
 8001c4a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c4c:	e00c      	b.n	8001c68 <HAL_CEC_IRQHandler+0x1c4>
    }
    else if (((reg & CEC_ISR_ARBLST) == 0U) && ((reg & (CEC_ISR_TXUDR | CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U))
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d107      	bne.n	8001c68 <HAL_CEC_IRQHandler+0x1c4>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d002      	beq.n	8001c68 <HAL_CEC_IRQHandler+0x1c4>
    {
      /* Set the CEC state ready to be able to start again the process */
      hcec->gState = HAL_CEC_STATE_READY;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2220      	movs	r2, #32
 8001c66:	639a      	str	r2, [r3, #56]	; 0x38
    }
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->ErrorCallback(hcec);
#else
    /* Error  Call Back */
    HAL_CEC_ErrorCallback(hcec);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f819 	bl	8001ca0 <HAL_CEC_ErrorCallback>
  }
  else
  {
    /* Nothing todo*/
  }
}
 8001c6e:	bf00      	nop
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_CEC_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_TxCpltCallback(CEC_HandleTypeDef *hcec)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_TxCpltCallback can be implemented in the user file
   */
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <HAL_CEC_RxCpltCallback>:
  * @param hcec CEC handle
  * @param RxFrameSize Size of frame
  * @retval None
  */
__weak void HAL_CEC_RxCpltCallback(CEC_HandleTypeDef *hcec, uint32_t RxFrameSize)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
 8001c92:	6039      	str	r1, [r7, #0]
  UNUSED(hcec);
  UNUSED(RxFrameSize);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_RxCpltCallback can be implemented in the user file
   */
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_CEC_ErrorCallback>:
  * @brief CEC error callbacks
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_ErrorCallback(CEC_HandleTypeDef *hcec)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_ErrorCallback can be implemented in the user file
   */
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ce6:	4a04      	ldr	r2, [pc, #16]	; (8001cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	60d3      	str	r3, [r2, #12]
}
 8001cec:	bf00      	nop
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d00:	4b04      	ldr	r3, [pc, #16]	; (8001d14 <__NVIC_GetPriorityGrouping+0x18>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	0a1b      	lsrs	r3, r3, #8
 8001d06:	f003 0307 	and.w	r3, r3, #7
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	db0b      	blt.n	8001d42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	f003 021f 	and.w	r2, r3, #31
 8001d30:	4907      	ldr	r1, [pc, #28]	; (8001d50 <__NVIC_EnableIRQ+0x38>)
 8001d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d36:	095b      	lsrs	r3, r3, #5
 8001d38:	2001      	movs	r0, #1
 8001d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	e000e100 	.word	0xe000e100

08001d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	6039      	str	r1, [r7, #0]
 8001d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	db0a      	blt.n	8001d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	490c      	ldr	r1, [pc, #48]	; (8001da0 <__NVIC_SetPriority+0x4c>)
 8001d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d72:	0112      	lsls	r2, r2, #4
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	440b      	add	r3, r1
 8001d78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d7c:	e00a      	b.n	8001d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	4908      	ldr	r1, [pc, #32]	; (8001da4 <__NVIC_SetPriority+0x50>)
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	3b04      	subs	r3, #4
 8001d8c:	0112      	lsls	r2, r2, #4
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	440b      	add	r3, r1
 8001d92:	761a      	strb	r2, [r3, #24]
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	e000e100 	.word	0xe000e100
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b089      	sub	sp, #36	; 0x24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f1c3 0307 	rsb	r3, r3, #7
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	bf28      	it	cs
 8001dc6:	2304      	movcs	r3, #4
 8001dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	3304      	adds	r3, #4
 8001dce:	2b06      	cmp	r3, #6
 8001dd0:	d902      	bls.n	8001dd8 <NVIC_EncodePriority+0x30>
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3b03      	subs	r3, #3
 8001dd6:	e000      	b.n	8001dda <NVIC_EncodePriority+0x32>
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ddc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43da      	mvns	r2, r3
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	401a      	ands	r2, r3
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfa:	43d9      	mvns	r1, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e00:	4313      	orrs	r3, r2
         );
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3724      	adds	r7, #36	; 0x24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
	...

08001e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e20:	d301      	bcc.n	8001e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e22:	2301      	movs	r3, #1
 8001e24:	e00f      	b.n	8001e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e26:	4a0a      	ldr	r2, [pc, #40]	; (8001e50 <SysTick_Config+0x40>)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e2e:	210f      	movs	r1, #15
 8001e30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e34:	f7ff ff8e 	bl	8001d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e38:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <SysTick_Config+0x40>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e3e:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <SysTick_Config+0x40>)
 8001e40:	2207      	movs	r2, #7
 8001e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	e000e010 	.word	0xe000e010

08001e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff ff29 	bl	8001cb4 <__NVIC_SetPriorityGrouping>
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b086      	sub	sp, #24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	4603      	mov	r3, r0
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
 8001e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e7c:	f7ff ff3e 	bl	8001cfc <__NVIC_GetPriorityGrouping>
 8001e80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	68b9      	ldr	r1, [r7, #8]
 8001e86:	6978      	ldr	r0, [r7, #20]
 8001e88:	f7ff ff8e 	bl	8001da8 <NVIC_EncodePriority>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e92:	4611      	mov	r1, r2
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff5d 	bl	8001d54 <__NVIC_SetPriority>
}
 8001e9a:	bf00      	nop
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff ff31 	bl	8001d18 <__NVIC_EnableIRQ>
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff ffa2 	bl	8001e10 <SysTick_Config>
 8001ecc:	4603      	mov	r3, r0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b089      	sub	sp, #36	; 0x24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]
 8001ef2:	e165      	b.n	80021c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	4013      	ands	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	f040 8154 	bne.w	80021ba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d00b      	beq.n	8001f32 <HAL_GPIO_Init+0x5a>
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d007      	beq.n	8001f32 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f26:	2b11      	cmp	r3, #17
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b12      	cmp	r3, #18
 8001f30:	d130      	bne.n	8001f94 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	2203      	movs	r2, #3
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43db      	mvns	r3, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4013      	ands	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f68:	2201      	movs	r2, #1
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	091b      	lsrs	r3, r3, #4
 8001f7e:	f003 0201 	and.w	r2, r3, #1
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d003      	beq.n	8001fd4 <HAL_GPIO_Init+0xfc>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b12      	cmp	r3, #18
 8001fd2:	d123      	bne.n	800201c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	08da      	lsrs	r2, r3, #3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3208      	adds	r2, #8
 8001fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	220f      	movs	r2, #15
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	691a      	ldr	r2, [r3, #16]
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	08da      	lsrs	r2, r3, #3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3208      	adds	r2, #8
 8002016:	69b9      	ldr	r1, [r7, #24]
 8002018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	2203      	movs	r2, #3
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 0203 	and.w	r2, r3, #3
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 80ae 	beq.w	80021ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	4b5c      	ldr	r3, [pc, #368]	; (80021d4 <HAL_GPIO_Init+0x2fc>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002066:	4a5b      	ldr	r2, [pc, #364]	; (80021d4 <HAL_GPIO_Init+0x2fc>)
 8002068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800206c:	6453      	str	r3, [r2, #68]	; 0x44
 800206e:	4b59      	ldr	r3, [pc, #356]	; (80021d4 <HAL_GPIO_Init+0x2fc>)
 8002070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800207a:	4a57      	ldr	r2, [pc, #348]	; (80021d8 <HAL_GPIO_Init+0x300>)
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	089b      	lsrs	r3, r3, #2
 8002080:	3302      	adds	r3, #2
 8002082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002086:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	220f      	movs	r2, #15
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a4e      	ldr	r2, [pc, #312]	; (80021dc <HAL_GPIO_Init+0x304>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d025      	beq.n	80020f2 <HAL_GPIO_Init+0x21a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a4d      	ldr	r2, [pc, #308]	; (80021e0 <HAL_GPIO_Init+0x308>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d01f      	beq.n	80020ee <HAL_GPIO_Init+0x216>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a4c      	ldr	r2, [pc, #304]	; (80021e4 <HAL_GPIO_Init+0x30c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d019      	beq.n	80020ea <HAL_GPIO_Init+0x212>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a4b      	ldr	r2, [pc, #300]	; (80021e8 <HAL_GPIO_Init+0x310>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d013      	beq.n	80020e6 <HAL_GPIO_Init+0x20e>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a4a      	ldr	r2, [pc, #296]	; (80021ec <HAL_GPIO_Init+0x314>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d00d      	beq.n	80020e2 <HAL_GPIO_Init+0x20a>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a49      	ldr	r2, [pc, #292]	; (80021f0 <HAL_GPIO_Init+0x318>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d007      	beq.n	80020de <HAL_GPIO_Init+0x206>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a48      	ldr	r2, [pc, #288]	; (80021f4 <HAL_GPIO_Init+0x31c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d101      	bne.n	80020da <HAL_GPIO_Init+0x202>
 80020d6:	2306      	movs	r3, #6
 80020d8:	e00c      	b.n	80020f4 <HAL_GPIO_Init+0x21c>
 80020da:	2307      	movs	r3, #7
 80020dc:	e00a      	b.n	80020f4 <HAL_GPIO_Init+0x21c>
 80020de:	2305      	movs	r3, #5
 80020e0:	e008      	b.n	80020f4 <HAL_GPIO_Init+0x21c>
 80020e2:	2304      	movs	r3, #4
 80020e4:	e006      	b.n	80020f4 <HAL_GPIO_Init+0x21c>
 80020e6:	2303      	movs	r3, #3
 80020e8:	e004      	b.n	80020f4 <HAL_GPIO_Init+0x21c>
 80020ea:	2302      	movs	r3, #2
 80020ec:	e002      	b.n	80020f4 <HAL_GPIO_Init+0x21c>
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <HAL_GPIO_Init+0x21c>
 80020f2:	2300      	movs	r3, #0
 80020f4:	69fa      	ldr	r2, [r7, #28]
 80020f6:	f002 0203 	and.w	r2, r2, #3
 80020fa:	0092      	lsls	r2, r2, #2
 80020fc:	4093      	lsls	r3, r2
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002104:	4934      	ldr	r1, [pc, #208]	; (80021d8 <HAL_GPIO_Init+0x300>)
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	089b      	lsrs	r3, r3, #2
 800210a:	3302      	adds	r3, #2
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002112:	4b39      	ldr	r3, [pc, #228]	; (80021f8 <HAL_GPIO_Init+0x320>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	43db      	mvns	r3, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4013      	ands	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002136:	4a30      	ldr	r2, [pc, #192]	; (80021f8 <HAL_GPIO_Init+0x320>)
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800213c:	4b2e      	ldr	r3, [pc, #184]	; (80021f8 <HAL_GPIO_Init+0x320>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002160:	4a25      	ldr	r2, [pc, #148]	; (80021f8 <HAL_GPIO_Init+0x320>)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002166:	4b24      	ldr	r3, [pc, #144]	; (80021f8 <HAL_GPIO_Init+0x320>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4313      	orrs	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800218a:	4a1b      	ldr	r2, [pc, #108]	; (80021f8 <HAL_GPIO_Init+0x320>)
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002190:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <HAL_GPIO_Init+0x320>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021b4:	4a10      	ldr	r2, [pc, #64]	; (80021f8 <HAL_GPIO_Init+0x320>)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3301      	adds	r3, #1
 80021be:	61fb      	str	r3, [r7, #28]
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	2b0f      	cmp	r3, #15
 80021c4:	f67f ae96 	bls.w	8001ef4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021c8:	bf00      	nop
 80021ca:	3724      	adds	r7, #36	; 0x24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40013800 	.word	0x40013800
 80021dc:	40020000 	.word	0x40020000
 80021e0:	40020400 	.word	0x40020400
 80021e4:	40020800 	.word	0x40020800
 80021e8:	40020c00 	.word	0x40020c00
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40021400 	.word	0x40021400
 80021f4:	40021800 	.word	0x40021800
 80021f8:	40013c00 	.word	0x40013c00

080021fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	460b      	mov	r3, r1
 8002206:	807b      	strh	r3, [r7, #2]
 8002208:	4613      	mov	r3, r2
 800220a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800220c:	787b      	ldrb	r3, [r7, #1]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002212:	887a      	ldrh	r2, [r7, #2]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002218:	e003      	b.n	8002222 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800221a:	887b      	ldrh	r3, [r7, #2]
 800221c:	041a      	lsls	r2, r3, #16
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	619a      	str	r2, [r3, #24]
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e11f      	b.n	8002482 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d106      	bne.n	800225c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7fe fd88 	bl	8000d6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2224      	movs	r2, #36	; 0x24
 8002260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 0201 	bic.w	r2, r2, #1
 8002272:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002282:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002292:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002294:	f000 fd3c 	bl	8002d10 <HAL_RCC_GetPCLK1Freq>
 8002298:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	4a7b      	ldr	r2, [pc, #492]	; (800248c <HAL_I2C_Init+0x25c>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d807      	bhi.n	80022b4 <HAL_I2C_Init+0x84>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4a7a      	ldr	r2, [pc, #488]	; (8002490 <HAL_I2C_Init+0x260>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	bf94      	ite	ls
 80022ac:	2301      	movls	r3, #1
 80022ae:	2300      	movhi	r3, #0
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	e006      	b.n	80022c2 <HAL_I2C_Init+0x92>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4a77      	ldr	r2, [pc, #476]	; (8002494 <HAL_I2C_Init+0x264>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	bf94      	ite	ls
 80022bc:	2301      	movls	r3, #1
 80022be:	2300      	movhi	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e0db      	b.n	8002482 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	4a72      	ldr	r2, [pc, #456]	; (8002498 <HAL_I2C_Init+0x268>)
 80022ce:	fba2 2303 	umull	r2, r3, r2, r3
 80022d2:	0c9b      	lsrs	r3, r3, #18
 80022d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	4a64      	ldr	r2, [pc, #400]	; (800248c <HAL_I2C_Init+0x25c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d802      	bhi.n	8002304 <HAL_I2C_Init+0xd4>
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	3301      	adds	r3, #1
 8002302:	e009      	b.n	8002318 <HAL_I2C_Init+0xe8>
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800230a:	fb02 f303 	mul.w	r3, r2, r3
 800230e:	4a63      	ldr	r2, [pc, #396]	; (800249c <HAL_I2C_Init+0x26c>)
 8002310:	fba2 2303 	umull	r2, r3, r2, r3
 8002314:	099b      	lsrs	r3, r3, #6
 8002316:	3301      	adds	r3, #1
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6812      	ldr	r2, [r2, #0]
 800231c:	430b      	orrs	r3, r1
 800231e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800232a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	4956      	ldr	r1, [pc, #344]	; (800248c <HAL_I2C_Init+0x25c>)
 8002334:	428b      	cmp	r3, r1
 8002336:	d80d      	bhi.n	8002354 <HAL_I2C_Init+0x124>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	1e59      	subs	r1, r3, #1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	fbb1 f3f3 	udiv	r3, r1, r3
 8002346:	3301      	adds	r3, #1
 8002348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800234c:	2b04      	cmp	r3, #4
 800234e:	bf38      	it	cc
 8002350:	2304      	movcc	r3, #4
 8002352:	e04f      	b.n	80023f4 <HAL_I2C_Init+0x1c4>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d111      	bne.n	8002380 <HAL_I2C_Init+0x150>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	1e58      	subs	r0, r3, #1
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6859      	ldr	r1, [r3, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	440b      	add	r3, r1
 800236a:	fbb0 f3f3 	udiv	r3, r0, r3
 800236e:	3301      	adds	r3, #1
 8002370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002374:	2b00      	cmp	r3, #0
 8002376:	bf0c      	ite	eq
 8002378:	2301      	moveq	r3, #1
 800237a:	2300      	movne	r3, #0
 800237c:	b2db      	uxtb	r3, r3
 800237e:	e012      	b.n	80023a6 <HAL_I2C_Init+0x176>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	1e58      	subs	r0, r3, #1
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6859      	ldr	r1, [r3, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	0099      	lsls	r1, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	fbb0 f3f3 	udiv	r3, r0, r3
 8002396:	3301      	adds	r3, #1
 8002398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800239c:	2b00      	cmp	r3, #0
 800239e:	bf0c      	ite	eq
 80023a0:	2301      	moveq	r3, #1
 80023a2:	2300      	movne	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_I2C_Init+0x17e>
 80023aa:	2301      	movs	r3, #1
 80023ac:	e022      	b.n	80023f4 <HAL_I2C_Init+0x1c4>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10e      	bne.n	80023d4 <HAL_I2C_Init+0x1a4>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	1e58      	subs	r0, r3, #1
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6859      	ldr	r1, [r3, #4]
 80023be:	460b      	mov	r3, r1
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	440b      	add	r3, r1
 80023c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80023c8:	3301      	adds	r3, #1
 80023ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023d2:	e00f      	b.n	80023f4 <HAL_I2C_Init+0x1c4>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	1e58      	subs	r0, r3, #1
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6859      	ldr	r1, [r3, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	0099      	lsls	r1, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ea:	3301      	adds	r3, #1
 80023ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	6809      	ldr	r1, [r1, #0]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69da      	ldr	r2, [r3, #28]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002422:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6911      	ldr	r1, [r2, #16]
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	68d2      	ldr	r2, [r2, #12]
 800242e:	4311      	orrs	r1, r2
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	430b      	orrs	r3, r1
 8002436:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	695a      	ldr	r2, [r3, #20]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	431a      	orrs	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0201 	orr.w	r2, r2, #1
 8002462:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2220      	movs	r2, #32
 800246e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	000186a0 	.word	0x000186a0
 8002490:	001e847f 	.word	0x001e847f
 8002494:	003d08ff 	.word	0x003d08ff
 8002498:	431bde83 	.word	0x431bde83
 800249c:	10624dd3 	.word	0x10624dd3

080024a0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e0e1      	b.n	8002676 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d109      	bne.n	80024d2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a6d      	ldr	r2, [pc, #436]	; (8002680 <HAL_I2S_Init+0x1e0>)
 80024ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f7fe fceb 	bl	8000ea8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2202      	movs	r2, #2
 80024d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80024e8:	f023 030f 	bic.w	r3, r3, #15
 80024ec:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2202      	movs	r2, #2
 80024f4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d06f      	beq.n	80025de <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d102      	bne.n	800250c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002506:	2310      	movs	r3, #16
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	e001      	b.n	8002510 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800250c:	2320      	movs	r3, #32
 800250e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	2b20      	cmp	r3, #32
 8002516:	d802      	bhi.n	800251e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a58      	ldr	r2, [pc, #352]	; (8002684 <HAL_I2S_Init+0x1e4>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d004      	beq.n	8002532 <HAL_I2S_Init+0x92>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a56      	ldr	r2, [pc, #344]	; (8002688 <HAL_I2S_Init+0x1e8>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d104      	bne.n	800253c <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8002532:	2001      	movs	r0, #1
 8002534:	f000 ff3e 	bl	80033b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002538:	60f8      	str	r0, [r7, #12]
 800253a:	e003      	b.n	8002544 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 800253c:	2002      	movs	r0, #2
 800253e:	f000 ff39 	bl	80033b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002542:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800254c:	d125      	bne.n	800259a <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d010      	beq.n	8002578 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002560:	4613      	mov	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	461a      	mov	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002572:	3305      	adds	r3, #5
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	e01f      	b.n	80025b8 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002582:	4613      	mov	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	461a      	mov	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	fbb2 f3f3 	udiv	r3, r2, r3
 8002594:	3305      	adds	r3, #5
 8002596:	613b      	str	r3, [r7, #16]
 8002598:	e00e      	b.n	80025b8 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	fbb2 f2f3 	udiv	r2, r2, r3
 80025a2:	4613      	mov	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	461a      	mov	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b4:	3305      	adds	r3, #5
 80025b6:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	4a34      	ldr	r2, [pc, #208]	; (800268c <HAL_I2S_Init+0x1ec>)
 80025bc:	fba2 2303 	umull	r2, r3, r2, r3
 80025c0:	08db      	lsrs	r3, r3, #3
 80025c2:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	085b      	lsrs	r3, r3, #1
 80025d4:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	021b      	lsls	r3, r3, #8
 80025da:	61bb      	str	r3, [r7, #24]
 80025dc:	e003      	b.n	80025e6 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80025de:	2302      	movs	r3, #2
 80025e0:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d902      	bls.n	80025f2 <HAL_I2S_Init+0x152>
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	2bff      	cmp	r3, #255	; 0xff
 80025f0:	d907      	bls.n	8002602 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f6:	f043 0210 	orr.w	r2, r3, #16
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e039      	b.n	8002676 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691a      	ldr	r2, [r3, #16]
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	ea42 0103 	orr.w	r1, r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	69fa      	ldr	r2, [r7, #28]
 8002612:	430a      	orrs	r2, r1
 8002614:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002620:	f023 030f 	bic.w	r3, r3, #15
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6851      	ldr	r1, [r2, #4]
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6892      	ldr	r2, [r2, #8]
 800262c:	4311      	orrs	r1, r2
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	68d2      	ldr	r2, [r2, #12]
 8002632:	4311      	orrs	r1, r2
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6992      	ldr	r2, [r2, #24]
 8002638:	430a      	orrs	r2, r1
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002644:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	2b30      	cmp	r3, #48	; 0x30
 800264c:	d003      	beq.n	8002656 <HAL_I2S_Init+0x1b6>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	2bb0      	cmp	r3, #176	; 0xb0
 8002654:	d107      	bne.n	8002666 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	69da      	ldr	r2, [r3, #28]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002664:	61da      	str	r2, [r3, #28]
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3720      	adds	r7, #32
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	08002787 	.word	0x08002787
 8002684:	40003800 	.word	0x40003800
 8002688:	40003c00 	.word	0x40003c00
 800268c:	cccccccd 	.word	0xcccccccd

08002690 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	881a      	ldrh	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	1c9a      	adds	r2, r3, #2
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10e      	bne.n	8002720 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002710:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff ffb8 	bl	8002690 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002720:	bf00      	nop
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273a:	b292      	uxth	r2, r2
 800273c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002742:	1c9a      	adds	r2, r3, #2
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800274c:	b29b      	uxth	r3, r3
 800274e:	3b01      	subs	r3, #1
 8002750:	b29a      	uxth	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800275a:	b29b      	uxth	r3, r3
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10e      	bne.n	800277e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800276e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7ff ff93 	bl	80026a4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b086      	sub	sp, #24
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d13a      	bne.n	8002818 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d109      	bne.n	80027c0 <I2S_IRQHandler+0x3a>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b6:	2b40      	cmp	r3, #64	; 0x40
 80027b8:	d102      	bne.n	80027c0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7ff ffb4 	bl	8002728 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c6:	2b40      	cmp	r3, #64	; 0x40
 80027c8:	d126      	bne.n	8002818 <I2S_IRQHandler+0x92>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 0320 	and.w	r3, r3, #32
 80027d4:	2b20      	cmp	r3, #32
 80027d6:	d11f      	bne.n	8002818 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80027e6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80027e8:	2300      	movs	r3, #0
 80027ea:	613b      	str	r3, [r7, #16]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	613b      	str	r3, [r7, #16]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	613b      	str	r3, [r7, #16]
 80027fc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	f043 0202 	orr.w	r2, r3, #2
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7ff ff50 	bl	80026b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b03      	cmp	r3, #3
 8002822:	d136      	bne.n	8002892 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b02      	cmp	r3, #2
 800282c:	d109      	bne.n	8002842 <I2S_IRQHandler+0xbc>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002838:	2b80      	cmp	r3, #128	; 0x80
 800283a:	d102      	bne.n	8002842 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f7ff ff45 	bl	80026cc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	2b08      	cmp	r3, #8
 800284a:	d122      	bne.n	8002892 <I2S_IRQHandler+0x10c>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f003 0320 	and.w	r3, r3, #32
 8002856:	2b20      	cmp	r3, #32
 8002858:	d11b      	bne.n	8002892 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002868:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002884:	f043 0204 	orr.w	r2, r3, #4
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff ff13 	bl	80026b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002892:	bf00      	nop
 8002894:	3718      	adds	r7, #24
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800289a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800289c:	b08f      	sub	sp, #60	; 0x3c
 800289e:	af0a      	add	r7, sp, #40	; 0x28
 80028a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e116      	b.n	8002ada <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d106      	bne.n	80028cc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7fe fc34 	bl	8001134 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2203      	movs	r2, #3
 80028d0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d102      	bne.n	80028e6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f002 fad9 	bl	8004ea2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	603b      	str	r3, [r7, #0]
 80028f6:	687e      	ldr	r6, [r7, #4]
 80028f8:	466d      	mov	r5, sp
 80028fa:	f106 0410 	add.w	r4, r6, #16
 80028fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002900:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002904:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002906:	e894 0003 	ldmia.w	r4, {r0, r1}
 800290a:	e885 0003 	stmia.w	r5, {r0, r1}
 800290e:	1d33      	adds	r3, r6, #4
 8002910:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002912:	6838      	ldr	r0, [r7, #0]
 8002914:	f002 fa64 	bl	8004de0 <USB_CoreInit>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d005      	beq.n	800292a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2202      	movs	r2, #2
 8002922:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e0d7      	b.n	8002ada <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2100      	movs	r1, #0
 8002930:	4618      	mov	r0, r3
 8002932:	f002 fac7 	bl	8004ec4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002936:	2300      	movs	r3, #0
 8002938:	73fb      	strb	r3, [r7, #15]
 800293a:	e04a      	b.n	80029d2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800293c:	7bfa      	ldrb	r2, [r7, #15]
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	4613      	mov	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	1a9b      	subs	r3, r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	333d      	adds	r3, #61	; 0x3d
 800294c:	2201      	movs	r2, #1
 800294e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002950:	7bfa      	ldrb	r2, [r7, #15]
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	1a9b      	subs	r3, r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	333c      	adds	r3, #60	; 0x3c
 8002960:	7bfa      	ldrb	r2, [r7, #15]
 8002962:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002964:	7bfa      	ldrb	r2, [r7, #15]
 8002966:	7bfb      	ldrb	r3, [r7, #15]
 8002968:	b298      	uxth	r0, r3
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	1a9b      	subs	r3, r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	3342      	adds	r3, #66	; 0x42
 8002978:	4602      	mov	r2, r0
 800297a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800297c:	7bfa      	ldrb	r2, [r7, #15]
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	1a9b      	subs	r3, r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	333f      	adds	r3, #63	; 0x3f
 800298c:	2200      	movs	r2, #0
 800298e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002990:	7bfa      	ldrb	r2, [r7, #15]
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	1a9b      	subs	r3, r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	3344      	adds	r3, #68	; 0x44
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029a4:	7bfa      	ldrb	r2, [r7, #15]
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	4613      	mov	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	1a9b      	subs	r3, r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	3348      	adds	r3, #72	; 0x48
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029b8:	7bfa      	ldrb	r2, [r7, #15]
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	1a9b      	subs	r3, r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	3350      	adds	r3, #80	; 0x50
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
 80029ce:	3301      	adds	r3, #1
 80029d0:	73fb      	strb	r3, [r7, #15]
 80029d2:	7bfa      	ldrb	r2, [r7, #15]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d3af      	bcc.n	800293c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029dc:	2300      	movs	r3, #0
 80029de:	73fb      	strb	r3, [r7, #15]
 80029e0:	e044      	b.n	8002a6c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029e2:	7bfa      	ldrb	r2, [r7, #15]
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	1a9b      	subs	r3, r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	440b      	add	r3, r1
 80029f0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80029f4:	2200      	movs	r2, #0
 80029f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029f8:	7bfa      	ldrb	r2, [r7, #15]
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	4613      	mov	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	1a9b      	subs	r3, r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002a0a:	7bfa      	ldrb	r2, [r7, #15]
 8002a0c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a0e:	7bfa      	ldrb	r2, [r7, #15]
 8002a10:	6879      	ldr	r1, [r7, #4]
 8002a12:	4613      	mov	r3, r2
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	1a9b      	subs	r3, r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	440b      	add	r3, r1
 8002a1c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002a20:	2200      	movs	r2, #0
 8002a22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a24:	7bfa      	ldrb	r2, [r7, #15]
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	1a9b      	subs	r3, r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a3a:	7bfa      	ldrb	r2, [r7, #15]
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	1a9b      	subs	r3, r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	440b      	add	r3, r1
 8002a48:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a50:	7bfa      	ldrb	r2, [r7, #15]
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	1a9b      	subs	r3, r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a66:	7bfb      	ldrb	r3, [r7, #15]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	73fb      	strb	r3, [r7, #15]
 8002a6c:	7bfa      	ldrb	r2, [r7, #15]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d3b5      	bcc.n	80029e2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	603b      	str	r3, [r7, #0]
 8002a7c:	687e      	ldr	r6, [r7, #4]
 8002a7e:	466d      	mov	r5, sp
 8002a80:	f106 0410 	add.w	r4, r6, #16
 8002a84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a90:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a94:	1d33      	adds	r3, r6, #4
 8002a96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a98:	6838      	ldr	r0, [r7, #0]
 8002a9a:	f002 fa3d 	bl	8004f18 <USB_DevInit>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e014      	b.n	8002ada <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d102      	bne.n	8002ace <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f80a 	bl	8002ae2 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f002 fbdf 	bl	8005296 <USB_DevDisconnect>

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ae2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b085      	sub	sp, #20
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b14:	f043 0303 	orr.w	r3, r3, #3
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
	...

08002b2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e0cc      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b40:	4b68      	ldr	r3, [pc, #416]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 030f 	and.w	r3, r3, #15
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d90c      	bls.n	8002b68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4e:	4b65      	ldr	r3, [pc, #404]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b56:	4b63      	ldr	r3, [pc, #396]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d001      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e0b8      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d020      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d005      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b80:	4b59      	ldr	r3, [pc, #356]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	4a58      	ldr	r2, [pc, #352]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0308 	and.w	r3, r3, #8
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d005      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b98:	4b53      	ldr	r3, [pc, #332]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	4a52      	ldr	r2, [pc, #328]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ba2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ba4:	4b50      	ldr	r3, [pc, #320]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	494d      	ldr	r1, [pc, #308]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d044      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d107      	bne.n	8002bda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bca:	4b47      	ldr	r3, [pc, #284]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d119      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e07f      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d003      	beq.n	8002bea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002be6:	2b03      	cmp	r3, #3
 8002be8:	d107      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bea:	4b3f      	ldr	r3, [pc, #252]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d109      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e06f      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bfa:	4b3b      	ldr	r3, [pc, #236]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e067      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c0a:	4b37      	ldr	r3, [pc, #220]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f023 0203 	bic.w	r2, r3, #3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	4934      	ldr	r1, [pc, #208]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c1c:	f7fe fc40 	bl	80014a0 <HAL_GetTick>
 8002c20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c22:	e00a      	b.n	8002c3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c24:	f7fe fc3c 	bl	80014a0 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e04f      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3a:	4b2b      	ldr	r3, [pc, #172]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 020c 	and.w	r2, r3, #12
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d1eb      	bne.n	8002c24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c4c:	4b25      	ldr	r3, [pc, #148]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 030f 	and.w	r3, r3, #15
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d20c      	bcs.n	8002c74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5a:	4b22      	ldr	r3, [pc, #136]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c62:	4b20      	ldr	r3, [pc, #128]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d001      	beq.n	8002c74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e032      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d008      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c80:	4b19      	ldr	r3, [pc, #100]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	4916      	ldr	r1, [pc, #88]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0308 	and.w	r3, r3, #8
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d009      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c9e:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	490e      	ldr	r1, [pc, #56]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cb2:	f000 fd9d 	bl	80037f0 <HAL_RCC_GetSysClockFreq>
 8002cb6:	4601      	mov	r1, r0
 8002cb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	091b      	lsrs	r3, r3, #4
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	4a0a      	ldr	r2, [pc, #40]	; (8002cec <HAL_RCC_ClockConfig+0x1c0>)
 8002cc4:	5cd3      	ldrb	r3, [r2, r3]
 8002cc6:	fa21 f303 	lsr.w	r3, r1, r3
 8002cca:	4a09      	ldr	r2, [pc, #36]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ccc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cce:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7fe fba0 	bl	8001418 <HAL_InitTick>

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40023c00 	.word	0x40023c00
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	080053b0 	.word	0x080053b0
 8002cf0:	20000000 	.word	0x20000000
 8002cf4:	20000004 	.word	0x20000004

08002cf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cfc:	4b03      	ldr	r3, [pc, #12]	; (8002d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	20000000 	.word	0x20000000

08002d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d14:	f7ff fff0 	bl	8002cf8 <HAL_RCC_GetHCLKFreq>
 8002d18:	4601      	mov	r1, r0
 8002d1a:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	0a9b      	lsrs	r3, r3, #10
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	4a03      	ldr	r2, [pc, #12]	; (8002d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d26:	5cd3      	ldrb	r3, [r2, r3]
 8002d28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40023800 	.word	0x40023800
 8002d34:	080053c0 	.word	0x080053c0

08002d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d3c:	f7ff ffdc 	bl	8002cf8 <HAL_RCC_GetHCLKFreq>
 8002d40:	4601      	mov	r1, r0
 8002d42:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	0b5b      	lsrs	r3, r3, #13
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	4a03      	ldr	r2, [pc, #12]	; (8002d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d4e:	5cd3      	ldrb	r3, [r2, r3]
 8002d50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	080053c0 	.word	0x080053c0

08002d60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08c      	sub	sp, #48	; 0x30
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d010      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002d98:	4b6f      	ldr	r3, [pc, #444]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d9e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da6:	496c      	ldr	r1, [pc, #432]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002db6:	2301      	movs	r3, #1
 8002db8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d010      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002dc6:	4b64      	ldr	r3, [pc, #400]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dcc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd4:	4960      	ldr	r1, [pc, #384]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002de4:	2301      	movs	r3, #1
 8002de6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d017      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002df4:	4b58      	ldr	r3, [pc, #352]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002df6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dfa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	4955      	ldr	r1, [pc, #340]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e12:	d101      	bne.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002e14:	2301      	movs	r3, #1
 8002e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002e20:	2301      	movs	r3, #1
 8002e22:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0308 	and.w	r3, r3, #8
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d017      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e30:	4b49      	ldr	r3, [pc, #292]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e3e:	4946      	ldr	r1, [pc, #280]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e4e:	d101      	bne.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002e50:	2301      	movs	r3, #1
 8002e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0320 	and.w	r3, r3, #32
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 808a 	beq.w	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60bb      	str	r3, [r7, #8]
 8002e72:	4b39      	ldr	r3, [pc, #228]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	4a38      	ldr	r2, [pc, #224]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e7e:	4b36      	ldr	r3, [pc, #216]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e86:	60bb      	str	r3, [r7, #8]
 8002e88:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002e8a:	4b34      	ldr	r3, [pc, #208]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a33      	ldr	r2, [pc, #204]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e94:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e96:	f7fe fb03 	bl	80014a0 <HAL_GetTick>
 8002e9a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e9e:	f7fe faff 	bl	80014a0 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e278      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002eb0:	4b2a      	ldr	r3, [pc, #168]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0f0      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ebc:	4b26      	ldr	r3, [pc, #152]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ec4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d02f      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ed4:	6a3a      	ldr	r2, [r7, #32]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d028      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002eda:	4b1f      	ldr	r3, [pc, #124]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ede:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ee2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ee4:	4b1e      	ldr	r3, [pc, #120]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002eea:	4b1d      	ldr	r3, [pc, #116]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002ef0:	4a19      	ldr	r2, [pc, #100]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ef6:	4b18      	ldr	r3, [pc, #96]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d114      	bne.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002f02:	f7fe facd 	bl	80014a0 <HAL_GetTick>
 8002f06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f08:	e00a      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f0a:	f7fe fac9 	bl	80014a0 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e240      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f20:	4b0d      	ldr	r3, [pc, #52]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0ee      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f38:	d114      	bne.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002f3a:	4b07      	ldr	r3, [pc, #28]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f4e:	4902      	ldr	r1, [pc, #8]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	608b      	str	r3, [r1, #8]
 8002f54:	e00c      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002f56:	bf00      	nop
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	40007000 	.word	0x40007000
 8002f60:	42470e40 	.word	0x42470e40
 8002f64:	4b4a      	ldr	r3, [pc, #296]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	4a49      	ldr	r2, [pc, #292]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f6a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002f6e:	6093      	str	r3, [r2, #8]
 8002f70:	4b47      	ldr	r3, [pc, #284]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f7c:	4944      	ldr	r1, [pc, #272]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0310 	and.w	r3, r3, #16
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d004      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002f94:	4b3f      	ldr	r3, [pc, #252]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002f96:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00a      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002fa4:	4b3a      	ldr	r3, [pc, #232]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002faa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb2:	4937      	ldr	r1, [pc, #220]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00a      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002fc6:	4b32      	ldr	r3, [pc, #200]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fcc:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fd4:	492e      	ldr	r1, [pc, #184]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d011      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002fe8:	4b29      	ldr	r3, [pc, #164]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fee:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff6:	4926      	ldr	r1, [pc, #152]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003002:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003006:	d101      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003008:	2301      	movs	r3, #1
 800300a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00a      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003018:	4b1d      	ldr	r3, [pc, #116]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800301a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800301e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003026:	491a      	ldr	r1, [pc, #104]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003028:	4313      	orrs	r3, r2
 800302a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003036:	2b00      	cmp	r3, #0
 8003038:	d011      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800303a:	4b15      	ldr	r3, [pc, #84]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800303c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003040:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003048:	4911      	ldr	r1, [pc, #68]	; (8003090 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800304a:	4313      	orrs	r3, r2
 800304c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003054:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003058:	d101      	bne.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800305a:	2301      	movs	r3, #1
 800305c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800305e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003060:	2b01      	cmp	r3, #1
 8003062:	d005      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800306c:	f040 80ff 	bne.w	800326e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003070:	4b09      	ldr	r3, [pc, #36]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003072:	2200      	movs	r2, #0
 8003074:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003076:	f7fe fa13 	bl	80014a0 <HAL_GetTick>
 800307a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800307c:	e00e      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800307e:	f7fe fa0f 	bl	80014a0 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d907      	bls.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e188      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003090:	40023800 	.word	0x40023800
 8003094:	424711e0 	.word	0x424711e0
 8003098:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800309c:	4b7e      	ldr	r3, [pc, #504]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1ea      	bne.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d009      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d028      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d124      	bne.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80030d0:	4b71      	ldr	r3, [pc, #452]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030d6:	0c1b      	lsrs	r3, r3, #16
 80030d8:	f003 0303 	and.w	r3, r3, #3
 80030dc:	3301      	adds	r3, #1
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030e2:	4b6d      	ldr	r3, [pc, #436]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030e8:	0e1b      	lsrs	r3, r3, #24
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	019b      	lsls	r3, r3, #6
 80030fa:	431a      	orrs	r2, r3
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	085b      	lsrs	r3, r3, #1
 8003100:	3b01      	subs	r3, #1
 8003102:	041b      	lsls	r3, r3, #16
 8003104:	431a      	orrs	r2, r3
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	061b      	lsls	r3, r3, #24
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	071b      	lsls	r3, r3, #28
 8003112:	4961      	ldr	r1, [pc, #388]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003114:	4313      	orrs	r3, r2
 8003116:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0304 	and.w	r3, r3, #4
 8003122:	2b00      	cmp	r3, #0
 8003124:	d004      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800312e:	d00a      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003138:	2b00      	cmp	r3, #0
 800313a:	d035      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003140:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003144:	d130      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003146:	4b54      	ldr	r3, [pc, #336]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800314c:	0c1b      	lsrs	r3, r3, #16
 800314e:	f003 0303 	and.w	r3, r3, #3
 8003152:	3301      	adds	r3, #1
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003158:	4b4f      	ldr	r3, [pc, #316]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800315a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800315e:	0f1b      	lsrs	r3, r3, #28
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	019b      	lsls	r3, r3, #6
 8003170:	431a      	orrs	r2, r3
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	085b      	lsrs	r3, r3, #1
 8003176:	3b01      	subs	r3, #1
 8003178:	041b      	lsls	r3, r3, #16
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	061b      	lsls	r3, r3, #24
 8003182:	431a      	orrs	r2, r3
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	071b      	lsls	r3, r3, #28
 8003188:	4943      	ldr	r1, [pc, #268]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003190:	4b41      	ldr	r3, [pc, #260]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003192:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003196:	f023 021f 	bic.w	r2, r3, #31
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319e:	3b01      	subs	r3, #1
 80031a0:	493d      	ldr	r1, [pc, #244]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d029      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031bc:	d124      	bne.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80031be:	4b36      	ldr	r3, [pc, #216]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031c4:	0c1b      	lsrs	r3, r3, #16
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	3301      	adds	r3, #1
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031d0:	4b31      	ldr	r3, [pc, #196]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031d6:	0f1b      	lsrs	r3, r3, #28
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	019b      	lsls	r3, r3, #6
 80031e8:	431a      	orrs	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	085b      	lsrs	r3, r3, #1
 80031f0:	3b01      	subs	r3, #1
 80031f2:	041b      	lsls	r3, r3, #16
 80031f4:	431a      	orrs	r2, r3
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	061b      	lsls	r3, r3, #24
 80031fa:	431a      	orrs	r2, r3
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	071b      	lsls	r3, r3, #28
 8003200:	4925      	ldr	r1, [pc, #148]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003202:	4313      	orrs	r3, r2
 8003204:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003210:	2b00      	cmp	r3, #0
 8003212:	d016      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	019b      	lsls	r3, r3, #6
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	085b      	lsrs	r3, r3, #1
 8003226:	3b01      	subs	r3, #1
 8003228:	041b      	lsls	r3, r3, #16
 800322a:	431a      	orrs	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	061b      	lsls	r3, r3, #24
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	071b      	lsls	r3, r3, #28
 800323a:	4917      	ldr	r1, [pc, #92]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800323c:	4313      	orrs	r3, r2
 800323e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003242:	4b16      	ldr	r3, [pc, #88]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003244:	2201      	movs	r2, #1
 8003246:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003248:	f7fe f92a 	bl	80014a0 <HAL_GetTick>
 800324c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003250:	f7fe f926 	bl	80014a0 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e09f      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003262:	4b0d      	ldr	r3, [pc, #52]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0f0      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800326e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003270:	2b01      	cmp	r3, #1
 8003272:	f040 8095 	bne.w	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003276:	4b0a      	ldr	r3, [pc, #40]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800327c:	f7fe f910 	bl	80014a0 <HAL_GetTick>
 8003280:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003282:	e00f      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003284:	f7fe f90c 	bl	80014a0 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d908      	bls.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e085      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003296:	bf00      	nop
 8003298:	40023800 	.word	0x40023800
 800329c:	42470068 	.word	0x42470068
 80032a0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032a4:	4b41      	ldr	r3, [pc, #260]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032b0:	d0e8      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0304 	and.w	r3, r3, #4
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d009      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d02b      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d127      	bne.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80032da:	4b34      	ldr	r3, [pc, #208]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e0:	0c1b      	lsrs	r3, r3, #16
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	3301      	adds	r3, #1
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	699a      	ldr	r2, [r3, #24]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	019b      	lsls	r3, r3, #6
 80032f6:	431a      	orrs	r2, r3
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	085b      	lsrs	r3, r3, #1
 80032fc:	3b01      	subs	r3, #1
 80032fe:	041b      	lsls	r3, r3, #16
 8003300:	431a      	orrs	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	061b      	lsls	r3, r3, #24
 8003308:	4928      	ldr	r1, [pc, #160]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003310:	4b26      	ldr	r3, [pc, #152]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003312:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003316:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331e:	3b01      	subs	r3, #1
 8003320:	021b      	lsls	r3, r3, #8
 8003322:	4922      	ldr	r1, [pc, #136]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003324:	4313      	orrs	r3, r2
 8003326:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003332:	2b00      	cmp	r3, #0
 8003334:	d01d      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800333e:	d118      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003340:	4b1a      	ldr	r3, [pc, #104]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003346:	0e1b      	lsrs	r3, r3, #24
 8003348:	f003 030f 	and.w	r3, r3, #15
 800334c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	699a      	ldr	r2, [r3, #24]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	019b      	lsls	r3, r3, #6
 8003358:	431a      	orrs	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	085b      	lsrs	r3, r3, #1
 8003360:	3b01      	subs	r3, #1
 8003362:	041b      	lsls	r3, r3, #16
 8003364:	431a      	orrs	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	061b      	lsls	r3, r3, #24
 800336a:	4910      	ldr	r1, [pc, #64]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800336c:	4313      	orrs	r3, r2
 800336e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003372:	4b0f      	ldr	r3, [pc, #60]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003374:	2201      	movs	r2, #1
 8003376:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003378:	f7fe f892 	bl	80014a0 <HAL_GetTick>
 800337c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003380:	f7fe f88e 	bl	80014a0 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e007      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003392:	4b06      	ldr	r3, [pc, #24]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800339a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800339e:	d1ef      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3730      	adds	r7, #48	; 0x30
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40023800 	.word	0x40023800
 80033b0:	42470070 	.word	0x42470070

080033b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b089      	sub	sp, #36	; 0x24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 80033bc:	2300      	movs	r3, #0
 80033be:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3b01      	subs	r3, #1
 80033d8:	2b07      	cmp	r3, #7
 80033da:	f200 81fa 	bhi.w	80037d2 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
 80033de:	a201      	add	r2, pc, #4	; (adr r2, 80033e4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80033e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e4:	080035ad 	.word	0x080035ad
 80033e8:	080036c9 	.word	0x080036c9
 80033ec:	080037d3 	.word	0x080037d3
 80033f0:	08003405 	.word	0x08003405
 80033f4:	080037d3 	.word	0x080037d3
 80033f8:	080037d3 	.word	0x080037d3
 80033fc:	080037d3 	.word	0x080037d3
 8003400:	08003405 	.word	0x08003405
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 8003404:	4bac      	ldr	r3, [pc, #688]	; (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8003406:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800340a:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8003412:	613b      	str	r3, [r7, #16]
      switch (saiclocksource)
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800341a:	f000 80b7 	beq.w	800358c <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 800341e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003422:	d809      	bhi.n	8003438 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
 8003424:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003428:	d04c      	beq.n	80034c4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800342a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800342e:	f000 8083 	beq.w	8003538 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00b      	beq.n	800344e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
          }
          break;
        }
      default :
        {
          break;
 8003436:	e0b8      	b.n	80035aa <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
      switch (saiclocksource)
 8003438:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800343c:	d07c      	beq.n	8003538 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 800343e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003442:	f000 80a6 	beq.w	8003592 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 8003446:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800344a:	d03b      	beq.n	80034c4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          break;
 800344c:	e0ad      	b.n	80035aa <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800344e:	4b9a      	ldr	r3, [pc, #616]	; (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d109      	bne.n	800346e <HAL_RCCEx_GetPeriphCLKFreq+0xba>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 800345a:	4b97      	ldr	r3, [pc, #604]	; (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800345c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003460:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003464:	4a95      	ldr	r2, [pc, #596]	; (80036bc <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8003466:	fbb2 f3f3 	udiv	r3, r2, r3
 800346a:	61bb      	str	r3, [r7, #24]
 800346c:	e008      	b.n	8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 800346e:	4b92      	ldr	r3, [pc, #584]	; (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8003470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003474:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003478:	4a91      	ldr	r2, [pc, #580]	; (80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 800347a:	fbb2 f3f3 	udiv	r3, r2, r3
 800347e:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8003480:	4b8d      	ldr	r3, [pc, #564]	; (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8003482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003486:	0e1b      	lsrs	r3, r3, #24
 8003488:	f003 030f 	and.w	r3, r3, #15
 800348c:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 800348e:	4b8a      	ldr	r3, [pc, #552]	; (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8003490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003494:	099b      	lsrs	r3, r3, #6
 8003496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	fb02 f203 	mul.w	r2, r2, r3
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a6:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 80034a8:	4b83      	ldr	r3, [pc, #524]	; (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80034aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034ae:	0a1b      	lsrs	r3, r3, #8
 80034b0:	f003 031f 	and.w	r3, r3, #31
 80034b4:	3301      	adds	r3, #1
 80034b6:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80034b8:	69fa      	ldr	r2, [r7, #28]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c0:	61fb      	str	r3, [r7, #28]
          break;
 80034c2:	e072      	b.n	80035aa <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80034c4:	4b7c      	ldr	r3, [pc, #496]	; (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d109      	bne.n	80034e4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80034d0:	4b79      	ldr	r3, [pc, #484]	; (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80034d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034da:	4a78      	ldr	r2, [pc, #480]	; (80036bc <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 80034dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e0:	61bb      	str	r3, [r7, #24]
 80034e2:	e008      	b.n	80034f6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 80034e4:	4b74      	ldr	r3, [pc, #464]	; (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80034e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034ee:	4a74      	ldr	r2, [pc, #464]	; (80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 80034f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f4:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80034f6:	4b70      	ldr	r3, [pc, #448]	; (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80034f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034fc:	0e1b      	lsrs	r3, r3, #24
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 8003504:	4b6c      	ldr	r3, [pc, #432]	; (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8003506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800350a:	099b      	lsrs	r3, r3, #6
 800350c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	fb02 f203 	mul.w	r2, r2, r3
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	fbb2 f3f3 	udiv	r3, r2, r3
 800351c:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 800351e:	4b66      	ldr	r3, [pc, #408]	; (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8003520:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003524:	f003 031f 	and.w	r3, r3, #31
 8003528:	3301      	adds	r3, #1
 800352a:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 800352c:	69fa      	ldr	r2, [r7, #28]
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	fbb2 f3f3 	udiv	r3, r2, r3
 8003534:	61fb      	str	r3, [r7, #28]
          break;
 8003536:	e038      	b.n	80035aa <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003538:	4b5f      	ldr	r3, [pc, #380]	; (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d108      	bne.n	8003556 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003544:	4b5c      	ldr	r3, [pc, #368]	; (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800354c:	4a5b      	ldr	r2, [pc, #364]	; (80036bc <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 800354e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003552:	61bb      	str	r3, [r7, #24]
 8003554:	e007      	b.n	8003566 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003556:	4b58      	ldr	r3, [pc, #352]	; (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800355e:	4a58      	ldr	r2, [pc, #352]	; (80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8003560:	fbb2 f3f3 	udiv	r3, r2, r3
 8003564:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8003566:	4b54      	ldr	r3, [pc, #336]	; (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	0f1b      	lsrs	r3, r3, #28
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 8003572:	4b51      	ldr	r3, [pc, #324]	; (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	099b      	lsrs	r3, r3, #6
 8003578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	fb02 f203 	mul.w	r2, r2, r3
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	fbb2 f3f3 	udiv	r3, r2, r3
 8003588:	61fb      	str	r3, [r7, #28]
          break;
 800358a:	e00e      	b.n	80035aa <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          frequency = EXTERNAL_CLOCK_VALUE;
 800358c:	4b4d      	ldr	r3, [pc, #308]	; (80036c4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 800358e:	61fb      	str	r3, [r7, #28]
          break;
 8003590:	e00b      	b.n	80035aa <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003592:	4b49      	ldr	r3, [pc, #292]	; (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d102      	bne.n	80035a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>
            frequency = (uint32_t)(HSI_VALUE);
 800359e:	4b47      	ldr	r3, [pc, #284]	; (80036bc <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 80035a0:	61fb      	str	r3, [r7, #28]
          break;
 80035a2:	e001      	b.n	80035a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
            frequency = (uint32_t)(HSE_VALUE);
 80035a4:	4b46      	ldr	r3, [pc, #280]	; (80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 80035a6:	61fb      	str	r3, [r7, #28]
          break;
 80035a8:	bf00      	nop
        }
      }
      break;
 80035aa:	e112      	b.n	80037d2 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80035ac:	4b42      	ldr	r3, [pc, #264]	; (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80035ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035b2:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80035b6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035be:	d00c      	beq.n	80035da <HAL_RCCEx_GetPeriphCLKFreq+0x226>
 80035c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035c4:	d802      	bhi.n	80035cc <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00a      	beq.n	80035e0 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 80035ca:	e070      	b.n	80036ae <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80035cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035d0:	d035      	beq.n	800363e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80035d2:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80035d6:	d05d      	beq.n	8003694 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 80035d8:	e069      	b.n	80036ae <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80035da:	4b3a      	ldr	r3, [pc, #232]	; (80036c4 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80035dc:	61fb      	str	r3, [r7, #28]
          break;
 80035de:	e069      	b.n	80036b4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80035e0:	4b35      	ldr	r3, [pc, #212]	; (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ec:	d109      	bne.n	8003602 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80035ee:	4b32      	ldr	r3, [pc, #200]	; (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 80035f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035f8:	4a31      	ldr	r2, [pc, #196]	; (80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 80035fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80035fe:	61bb      	str	r3, [r7, #24]
 8003600:	e008      	b.n	8003614 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003602:	4b2d      	ldr	r3, [pc, #180]	; (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8003604:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800360c:	4a2b      	ldr	r2, [pc, #172]	; (80036bc <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 800360e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003612:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003614:	4b28      	ldr	r3, [pc, #160]	; (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8003616:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800361a:	099b      	lsrs	r3, r3, #6
 800361c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	fb02 f303 	mul.w	r3, r2, r3
 8003626:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003628:	4b23      	ldr	r3, [pc, #140]	; (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800362a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800362e:	0f1b      	lsrs	r3, r3, #28
 8003630:	f003 0307 	and.w	r3, r3, #7
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	fbb2 f3f3 	udiv	r3, r2, r3
 800363a:	61fb      	str	r3, [r7, #28]
          break;
 800363c:	e03a      	b.n	80036b4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800363e:	4b1e      	ldr	r3, [pc, #120]	; (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003646:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800364a:	d108      	bne.n	800365e <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800364c:	4b1a      	ldr	r3, [pc, #104]	; (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003654:	4a1a      	ldr	r2, [pc, #104]	; (80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 8003656:	fbb2 f3f3 	udiv	r3, r2, r3
 800365a:	61bb      	str	r3, [r7, #24]
 800365c:	e007      	b.n	800366e <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800365e:	4b16      	ldr	r3, [pc, #88]	; (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003666:	4a15      	ldr	r2, [pc, #84]	; (80036bc <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 8003668:	fbb2 f3f3 	udiv	r3, r2, r3
 800366c:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800366e:	4b12      	ldr	r3, [pc, #72]	; (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	099b      	lsrs	r3, r3, #6
 8003674:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	fb02 f303 	mul.w	r3, r2, r3
 800367e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8003680:	4b0d      	ldr	r3, [pc, #52]	; (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	0f1b      	lsrs	r3, r3, #28
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003690:	61fb      	str	r3, [r7, #28]
          break;
 8003692:	e00f      	b.n	80036b4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003694:	4b08      	ldr	r3, [pc, #32]	; (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800369c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036a0:	d102      	bne.n	80036a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
          {
            frequency = HSE_VALUE;
 80036a2:	4b07      	ldr	r3, [pc, #28]	; (80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
 80036a4:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80036a6:	e005      	b.n	80036b4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
            frequency = HSI_VALUE;
 80036a8:	4b04      	ldr	r3, [pc, #16]	; (80036bc <HAL_RCCEx_GetPeriphCLKFreq+0x308>)
 80036aa:	61fb      	str	r3, [r7, #28]
          break;
 80036ac:	e002      	b.n	80036b4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80036ae:	2300      	movs	r3, #0
 80036b0:	61fb      	str	r3, [r7, #28]
          break;
 80036b2:	bf00      	nop
        }
      }
      break;
 80036b4:	e08d      	b.n	80037d2 <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
 80036b6:	bf00      	nop
 80036b8:	40023800 	.word	0x40023800
 80036bc:	00f42400 	.word	0x00f42400
 80036c0:	017d7840 	.word	0x017d7840
 80036c4:	00bb8000 	.word	0x00bb8000
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 80036c8:	4b45      	ldr	r3, [pc, #276]	; (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 80036ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036ce:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 80036d2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036da:	d00c      	beq.n	80036f6 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80036dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036e0:	d802      	bhi.n	80036e8 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00a      	beq.n	80036fc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
 80036e6:	e070      	b.n	80037ca <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 80036e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036ec:	d035      	beq.n	800375a <HAL_RCCEx_GetPeriphCLKFreq+0x3a6>
 80036ee:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80036f2:	d05d      	beq.n	80037b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 80036f4:	e069      	b.n	80037ca <HAL_RCCEx_GetPeriphCLKFreq+0x416>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80036f6:	4b3b      	ldr	r3, [pc, #236]	; (80037e4 <HAL_RCCEx_GetPeriphCLKFreq+0x430>)
 80036f8:	61fb      	str	r3, [r7, #28]
          break;
 80036fa:	e069      	b.n	80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80036fc:	4b38      	ldr	r3, [pc, #224]	; (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003704:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003708:	d109      	bne.n	800371e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800370a:	4b35      	ldr	r3, [pc, #212]	; (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 800370c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003710:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003714:	4a34      	ldr	r2, [pc, #208]	; (80037e8 <HAL_RCCEx_GetPeriphCLKFreq+0x434>)
 8003716:	fbb2 f3f3 	udiv	r3, r2, r3
 800371a:	61bb      	str	r3, [r7, #24]
 800371c:	e008      	b.n	8003730 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800371e:	4b30      	ldr	r3, [pc, #192]	; (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 8003720:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003724:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003728:	4a30      	ldr	r2, [pc, #192]	; (80037ec <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 800372a:	fbb2 f3f3 	udiv	r3, r2, r3
 800372e:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003730:	4b2b      	ldr	r3, [pc, #172]	; (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 8003732:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003736:	099b      	lsrs	r3, r3, #6
 8003738:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	fb02 f303 	mul.w	r3, r2, r3
 8003742:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003744:	4b26      	ldr	r3, [pc, #152]	; (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 8003746:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800374a:	0f1b      	lsrs	r3, r3, #28
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	fbb2 f3f3 	udiv	r3, r2, r3
 8003756:	61fb      	str	r3, [r7, #28]
          break;
 8003758:	e03a      	b.n	80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800375a:	4b21      	ldr	r3, [pc, #132]	; (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003762:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003766:	d108      	bne.n	800377a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003768:	4b1d      	ldr	r3, [pc, #116]	; (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003770:	4a1d      	ldr	r2, [pc, #116]	; (80037e8 <HAL_RCCEx_GetPeriphCLKFreq+0x434>)
 8003772:	fbb2 f3f3 	udiv	r3, r2, r3
 8003776:	61bb      	str	r3, [r7, #24]
 8003778:	e007      	b.n	800378a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800377a:	4b19      	ldr	r3, [pc, #100]	; (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003782:	4a1a      	ldr	r2, [pc, #104]	; (80037ec <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8003784:	fbb2 f3f3 	udiv	r3, r2, r3
 8003788:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800378a:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	099b      	lsrs	r3, r3, #6
 8003790:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	fb02 f303 	mul.w	r3, r2, r3
 800379a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800379c:	4b10      	ldr	r3, [pc, #64]	; (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	0f1b      	lsrs	r3, r3, #28
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ac:	61fb      	str	r3, [r7, #28]
          break;
 80037ae:	e00f      	b.n	80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80037b0:	4b0b      	ldr	r3, [pc, #44]	; (80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037bc:	d102      	bne.n	80037c4 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          {
            frequency = HSE_VALUE;
 80037be:	4b0a      	ldr	r3, [pc, #40]	; (80037e8 <HAL_RCCEx_GetPeriphCLKFreq+0x434>)
 80037c0:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80037c2:	e005      	b.n	80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            frequency = HSI_VALUE;
 80037c4:	4b09      	ldr	r3, [pc, #36]	; (80037ec <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80037c6:	61fb      	str	r3, [r7, #28]
          break;
 80037c8:	e002      	b.n	80037d0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80037ca:	2300      	movs	r3, #0
 80037cc:	61fb      	str	r3, [r7, #28]
          break;
 80037ce:	bf00      	nop
        }
      }
      break;
 80037d0:	bf00      	nop
    }
  }
  return frequency;
 80037d2:	69fb      	ldr	r3, [r7, #28]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3724      	adds	r7, #36	; 0x24
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	40023800 	.word	0x40023800
 80037e4:	00bb8000 	.word	0x00bb8000
 80037e8:	017d7840 	.word	0x017d7840
 80037ec:	00f42400 	.word	0x00f42400

080037f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037f2:	b087      	sub	sp, #28
 80037f4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80037fe:	2300      	movs	r3, #0
 8003800:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8003802:	2300      	movs	r3, #0
 8003804:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003806:	2300      	movs	r3, #0
 8003808:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800380a:	4b9f      	ldr	r3, [pc, #636]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x298>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 030c 	and.w	r3, r3, #12
 8003812:	2b0c      	cmp	r3, #12
 8003814:	f200 8130 	bhi.w	8003a78 <HAL_RCC_GetSysClockFreq+0x288>
 8003818:	a201      	add	r2, pc, #4	; (adr r2, 8003820 <HAL_RCC_GetSysClockFreq+0x30>)
 800381a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381e:	bf00      	nop
 8003820:	08003855 	.word	0x08003855
 8003824:	08003a79 	.word	0x08003a79
 8003828:	08003a79 	.word	0x08003a79
 800382c:	08003a79 	.word	0x08003a79
 8003830:	0800385b 	.word	0x0800385b
 8003834:	08003a79 	.word	0x08003a79
 8003838:	08003a79 	.word	0x08003a79
 800383c:	08003a79 	.word	0x08003a79
 8003840:	08003861 	.word	0x08003861
 8003844:	08003a79 	.word	0x08003a79
 8003848:	08003a79 	.word	0x08003a79
 800384c:	08003a79 	.word	0x08003a79
 8003850:	0800396f 	.word	0x0800396f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003854:	4b8d      	ldr	r3, [pc, #564]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x29c>)
 8003856:	613b      	str	r3, [r7, #16]
       break;
 8003858:	e111      	b.n	8003a7e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800385a:	4b8d      	ldr	r3, [pc, #564]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800385c:	613b      	str	r3, [r7, #16]
      break;
 800385e:	e10e      	b.n	8003a7e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003860:	4b89      	ldr	r3, [pc, #548]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x298>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003868:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800386a:	4b87      	ldr	r3, [pc, #540]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x298>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d023      	beq.n	80038be <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003876:	4b84      	ldr	r3, [pc, #528]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x298>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	099b      	lsrs	r3, r3, #6
 800387c:	f04f 0400 	mov.w	r4, #0
 8003880:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003884:	f04f 0200 	mov.w	r2, #0
 8003888:	ea03 0501 	and.w	r5, r3, r1
 800388c:	ea04 0602 	and.w	r6, r4, r2
 8003890:	4a7f      	ldr	r2, [pc, #508]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8003892:	fb02 f106 	mul.w	r1, r2, r6
 8003896:	2200      	movs	r2, #0
 8003898:	fb02 f205 	mul.w	r2, r2, r5
 800389c:	440a      	add	r2, r1
 800389e:	497c      	ldr	r1, [pc, #496]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80038a0:	fba5 0101 	umull	r0, r1, r5, r1
 80038a4:	1853      	adds	r3, r2, r1
 80038a6:	4619      	mov	r1, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f04f 0400 	mov.w	r4, #0
 80038ae:	461a      	mov	r2, r3
 80038b0:	4623      	mov	r3, r4
 80038b2:	f7fc fca7 	bl	8000204 <__aeabi_uldivmod>
 80038b6:	4603      	mov	r3, r0
 80038b8:	460c      	mov	r4, r1
 80038ba:	617b      	str	r3, [r7, #20]
 80038bc:	e049      	b.n	8003952 <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038be:	4b72      	ldr	r3, [pc, #456]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x298>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	099b      	lsrs	r3, r3, #6
 80038c4:	f04f 0400 	mov.w	r4, #0
 80038c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80038cc:	f04f 0200 	mov.w	r2, #0
 80038d0:	ea03 0501 	and.w	r5, r3, r1
 80038d4:	ea04 0602 	and.w	r6, r4, r2
 80038d8:	4629      	mov	r1, r5
 80038da:	4632      	mov	r2, r6
 80038dc:	f04f 0300 	mov.w	r3, #0
 80038e0:	f04f 0400 	mov.w	r4, #0
 80038e4:	0154      	lsls	r4, r2, #5
 80038e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80038ea:	014b      	lsls	r3, r1, #5
 80038ec:	4619      	mov	r1, r3
 80038ee:	4622      	mov	r2, r4
 80038f0:	1b49      	subs	r1, r1, r5
 80038f2:	eb62 0206 	sbc.w	r2, r2, r6
 80038f6:	f04f 0300 	mov.w	r3, #0
 80038fa:	f04f 0400 	mov.w	r4, #0
 80038fe:	0194      	lsls	r4, r2, #6
 8003900:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003904:	018b      	lsls	r3, r1, #6
 8003906:	1a5b      	subs	r3, r3, r1
 8003908:	eb64 0402 	sbc.w	r4, r4, r2
 800390c:	f04f 0100 	mov.w	r1, #0
 8003910:	f04f 0200 	mov.w	r2, #0
 8003914:	00e2      	lsls	r2, r4, #3
 8003916:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800391a:	00d9      	lsls	r1, r3, #3
 800391c:	460b      	mov	r3, r1
 800391e:	4614      	mov	r4, r2
 8003920:	195b      	adds	r3, r3, r5
 8003922:	eb44 0406 	adc.w	r4, r4, r6
 8003926:	f04f 0100 	mov.w	r1, #0
 800392a:	f04f 0200 	mov.w	r2, #0
 800392e:	02a2      	lsls	r2, r4, #10
 8003930:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003934:	0299      	lsls	r1, r3, #10
 8003936:	460b      	mov	r3, r1
 8003938:	4614      	mov	r4, r2
 800393a:	4618      	mov	r0, r3
 800393c:	4621      	mov	r1, r4
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f04f 0400 	mov.w	r4, #0
 8003944:	461a      	mov	r2, r3
 8003946:	4623      	mov	r3, r4
 8003948:	f7fc fc5c 	bl	8000204 <__aeabi_uldivmod>
 800394c:	4603      	mov	r3, r0
 800394e:	460c      	mov	r4, r1
 8003950:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003952:	4b4d      	ldr	r3, [pc, #308]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x298>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	0c1b      	lsrs	r3, r3, #16
 8003958:	f003 0303 	and.w	r3, r3, #3
 800395c:	3301      	adds	r3, #1
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	fbb2 f3f3 	udiv	r3, r2, r3
 800396a:	613b      	str	r3, [r7, #16]
      break;
 800396c:	e087      	b.n	8003a7e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800396e:	4b46      	ldr	r3, [pc, #280]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x298>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003976:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003978:	4b43      	ldr	r3, [pc, #268]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x298>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d023      	beq.n	80039cc <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003984:	4b40      	ldr	r3, [pc, #256]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x298>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	099b      	lsrs	r3, r3, #6
 800398a:	f04f 0400 	mov.w	r4, #0
 800398e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003992:	f04f 0200 	mov.w	r2, #0
 8003996:	ea03 0501 	and.w	r5, r3, r1
 800399a:	ea04 0602 	and.w	r6, r4, r2
 800399e:	4a3c      	ldr	r2, [pc, #240]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80039a0:	fb02 f106 	mul.w	r1, r2, r6
 80039a4:	2200      	movs	r2, #0
 80039a6:	fb02 f205 	mul.w	r2, r2, r5
 80039aa:	440a      	add	r2, r1
 80039ac:	4938      	ldr	r1, [pc, #224]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80039ae:	fba5 0101 	umull	r0, r1, r5, r1
 80039b2:	1853      	adds	r3, r2, r1
 80039b4:	4619      	mov	r1, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f04f 0400 	mov.w	r4, #0
 80039bc:	461a      	mov	r2, r3
 80039be:	4623      	mov	r3, r4
 80039c0:	f7fc fc20 	bl	8000204 <__aeabi_uldivmod>
 80039c4:	4603      	mov	r3, r0
 80039c6:	460c      	mov	r4, r1
 80039c8:	617b      	str	r3, [r7, #20]
 80039ca:	e049      	b.n	8003a60 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039cc:	4b2e      	ldr	r3, [pc, #184]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x298>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	099b      	lsrs	r3, r3, #6
 80039d2:	f04f 0400 	mov.w	r4, #0
 80039d6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80039da:	f04f 0200 	mov.w	r2, #0
 80039de:	ea03 0501 	and.w	r5, r3, r1
 80039e2:	ea04 0602 	and.w	r6, r4, r2
 80039e6:	4629      	mov	r1, r5
 80039e8:	4632      	mov	r2, r6
 80039ea:	f04f 0300 	mov.w	r3, #0
 80039ee:	f04f 0400 	mov.w	r4, #0
 80039f2:	0154      	lsls	r4, r2, #5
 80039f4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80039f8:	014b      	lsls	r3, r1, #5
 80039fa:	4619      	mov	r1, r3
 80039fc:	4622      	mov	r2, r4
 80039fe:	1b49      	subs	r1, r1, r5
 8003a00:	eb62 0206 	sbc.w	r2, r2, r6
 8003a04:	f04f 0300 	mov.w	r3, #0
 8003a08:	f04f 0400 	mov.w	r4, #0
 8003a0c:	0194      	lsls	r4, r2, #6
 8003a0e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a12:	018b      	lsls	r3, r1, #6
 8003a14:	1a5b      	subs	r3, r3, r1
 8003a16:	eb64 0402 	sbc.w	r4, r4, r2
 8003a1a:	f04f 0100 	mov.w	r1, #0
 8003a1e:	f04f 0200 	mov.w	r2, #0
 8003a22:	00e2      	lsls	r2, r4, #3
 8003a24:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003a28:	00d9      	lsls	r1, r3, #3
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4614      	mov	r4, r2
 8003a2e:	195b      	adds	r3, r3, r5
 8003a30:	eb44 0406 	adc.w	r4, r4, r6
 8003a34:	f04f 0100 	mov.w	r1, #0
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	02a2      	lsls	r2, r4, #10
 8003a3e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003a42:	0299      	lsls	r1, r3, #10
 8003a44:	460b      	mov	r3, r1
 8003a46:	4614      	mov	r4, r2
 8003a48:	4618      	mov	r0, r3
 8003a4a:	4621      	mov	r1, r4
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f04f 0400 	mov.w	r4, #0
 8003a52:	461a      	mov	r2, r3
 8003a54:	4623      	mov	r3, r4
 8003a56:	f7fc fbd5 	bl	8000204 <__aeabi_uldivmod>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	460c      	mov	r4, r1
 8003a5e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003a60:	4b09      	ldr	r3, [pc, #36]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x298>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	0f1b      	lsrs	r3, r3, #28
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a74:	613b      	str	r3, [r7, #16]
      break;
 8003a76:	e002      	b.n	8003a7e <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a78:	4b04      	ldr	r3, [pc, #16]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x29c>)
 8003a7a:	613b      	str	r3, [r7, #16]
      break;
 8003a7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a7e:	693b      	ldr	r3, [r7, #16]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	371c      	adds	r7, #28
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	00f42400 	.word	0x00f42400
 8003a90:	017d7840 	.word	0x017d7840

08003a94 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 8083 	beq.w	8003bb4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003aae:	4b95      	ldr	r3, [pc, #596]	; (8003d04 <HAL_RCC_OscConfig+0x270>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f003 030c 	and.w	r3, r3, #12
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d019      	beq.n	8003aee <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003aba:	4b92      	ldr	r3, [pc, #584]	; (8003d04 <HAL_RCC_OscConfig+0x270>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ac2:	2b08      	cmp	r3, #8
 8003ac4:	d106      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ac6:	4b8f      	ldr	r3, [pc, #572]	; (8003d04 <HAL_RCC_OscConfig+0x270>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ace:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ad2:	d00c      	beq.n	8003aee <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ad4:	4b8b      	ldr	r3, [pc, #556]	; (8003d04 <HAL_RCC_OscConfig+0x270>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003adc:	2b0c      	cmp	r3, #12
 8003ade:	d112      	bne.n	8003b06 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ae0:	4b88      	ldr	r3, [pc, #544]	; (8003d04 <HAL_RCC_OscConfig+0x270>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ae8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aec:	d10b      	bne.n	8003b06 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aee:	4b85      	ldr	r3, [pc, #532]	; (8003d04 <HAL_RCC_OscConfig+0x270>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d05b      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x11e>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d157      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e216      	b.n	8003f34 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b0e:	d106      	bne.n	8003b1e <HAL_RCC_OscConfig+0x8a>
 8003b10:	4b7c      	ldr	r3, [pc, #496]	; (8003d04 <HAL_RCC_OscConfig+0x270>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a7b      	ldr	r2, [pc, #492]	; (8003d04 <HAL_RCC_OscConfig+0x270>)
 8003b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b1a:	6013      	str	r3, [r2, #0]
 8003b1c:	e01d      	b.n	8003b5a <HAL_RCC_OscConfig+0xc6>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b26:	d10c      	bne.n	8003b42 <HAL_RCC_OscConfig+0xae>
 8003b28:	4b76      	ldr	r3, [pc, #472]	; (8003d04 <HAL_RCC_OscConfig+0x270>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a75      	ldr	r2, [pc, #468]	; (8003d04 <HAL_RCC_OscConfig+0x270>)
 8003b2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b32:	6013      	str	r3, [r2, #0]
 8003b34:	4b73      	ldr	r3, [pc, #460]	; (8003d04 <HAL_RCC_OscConfig+0x270>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a72      	ldr	r2, [pc, #456]	; (8003d04 <HAL_RCC_OscConfig+0x270>)
 8003b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b3e:	6013      	str	r3, [r2, #0]
 8003b40:	e00b      	b.n	8003b5a <HAL_RCC_OscConfig+0xc6>
 8003b42:	4b70      	ldr	r3, [pc, #448]	; (8003d04 <HAL_RCC_OscConfig+0x270>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a6f      	ldr	r2, [pc, #444]	; (8003d04 <HAL_RCC_OscConfig+0x270>)
 8003b48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	4b6d      	ldr	r3, [pc, #436]	; (8003d04 <HAL_RCC_OscConfig+0x270>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a6c      	ldr	r2, [pc, #432]	; (8003d04 <HAL_RCC_OscConfig+0x270>)
 8003b54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b58:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d013      	beq.n	8003b8a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b62:	f7fd fc9d 	bl	80014a0 <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b6a:	f7fd fc99 	bl	80014a0 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b64      	cmp	r3, #100	; 0x64
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e1db      	b.n	8003f34 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b7c:	4b61      	ldr	r3, [pc, #388]	; (8003d04 <HAL_RCC_OscConfig+0x270>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d0f0      	beq.n	8003b6a <HAL_RCC_OscConfig+0xd6>
 8003b88:	e014      	b.n	8003bb4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8a:	f7fd fc89 	bl	80014a0 <HAL_GetTick>
 8003b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b90:	e008      	b.n	8003ba4 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b92:	f7fd fc85 	bl	80014a0 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b64      	cmp	r3, #100	; 0x64
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e1c7      	b.n	8003f34 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ba4:	4b57      	ldr	r3, [pc, #348]	; (8003d04 <HAL_RCC_OscConfig+0x270>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1f0      	bne.n	8003b92 <HAL_RCC_OscConfig+0xfe>
 8003bb0:	e000      	b.n	8003bb4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d06f      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003bc0:	4b50      	ldr	r3, [pc, #320]	; (8003d04 <HAL_RCC_OscConfig+0x270>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f003 030c 	and.w	r3, r3, #12
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d017      	beq.n	8003bfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003bcc:	4b4d      	ldr	r3, [pc, #308]	; (8003d04 <HAL_RCC_OscConfig+0x270>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	d105      	bne.n	8003be4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003bd8:	4b4a      	ldr	r3, [pc, #296]	; (8003d04 <HAL_RCC_OscConfig+0x270>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00b      	beq.n	8003bfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003be4:	4b47      	ldr	r3, [pc, #284]	; (8003d04 <HAL_RCC_OscConfig+0x270>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003bec:	2b0c      	cmp	r3, #12
 8003bee:	d11c      	bne.n	8003c2a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bf0:	4b44      	ldr	r3, [pc, #272]	; (8003d04 <HAL_RCC_OscConfig+0x270>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d116      	bne.n	8003c2a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bfc:	4b41      	ldr	r3, [pc, #260]	; (8003d04 <HAL_RCC_OscConfig+0x270>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d005      	beq.n	8003c14 <HAL_RCC_OscConfig+0x180>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d001      	beq.n	8003c14 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e18f      	b.n	8003f34 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c14:	4b3b      	ldr	r3, [pc, #236]	; (8003d04 <HAL_RCC_OscConfig+0x270>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	4938      	ldr	r1, [pc, #224]	; (8003d04 <HAL_RCC_OscConfig+0x270>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c28:	e03a      	b.n	8003ca0 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d020      	beq.n	8003c74 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c32:	4b35      	ldr	r3, [pc, #212]	; (8003d08 <HAL_RCC_OscConfig+0x274>)
 8003c34:	2201      	movs	r2, #1
 8003c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c38:	f7fd fc32 	bl	80014a0 <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c40:	f7fd fc2e 	bl	80014a0 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e170      	b.n	8003f34 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c52:	4b2c      	ldr	r3, [pc, #176]	; (8003d04 <HAL_RCC_OscConfig+0x270>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d0f0      	beq.n	8003c40 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c5e:	4b29      	ldr	r3, [pc, #164]	; (8003d04 <HAL_RCC_OscConfig+0x270>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	4925      	ldr	r1, [pc, #148]	; (8003d04 <HAL_RCC_OscConfig+0x270>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	600b      	str	r3, [r1, #0]
 8003c72:	e015      	b.n	8003ca0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c74:	4b24      	ldr	r3, [pc, #144]	; (8003d08 <HAL_RCC_OscConfig+0x274>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7a:	f7fd fc11 	bl	80014a0 <HAL_GetTick>
 8003c7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c80:	e008      	b.n	8003c94 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c82:	f7fd fc0d 	bl	80014a0 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e14f      	b.n	8003f34 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c94:	4b1b      	ldr	r3, [pc, #108]	; (8003d04 <HAL_RCC_OscConfig+0x270>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1f0      	bne.n	8003c82 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0308 	and.w	r3, r3, #8
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d037      	beq.n	8003d1c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d016      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cb4:	4b15      	ldr	r3, [pc, #84]	; (8003d0c <HAL_RCC_OscConfig+0x278>)
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cba:	f7fd fbf1 	bl	80014a0 <HAL_GetTick>
 8003cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cc0:	e008      	b.n	8003cd4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cc2:	f7fd fbed 	bl	80014a0 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e12f      	b.n	8003f34 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cd4:	4b0b      	ldr	r3, [pc, #44]	; (8003d04 <HAL_RCC_OscConfig+0x270>)
 8003cd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0f0      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x22e>
 8003ce0:	e01c      	b.n	8003d1c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ce2:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <HAL_RCC_OscConfig+0x278>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce8:	f7fd fbda 	bl	80014a0 <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cee:	e00f      	b.n	8003d10 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cf0:	f7fd fbd6 	bl	80014a0 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d908      	bls.n	8003d10 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e118      	b.n	8003f34 <HAL_RCC_OscConfig+0x4a0>
 8003d02:	bf00      	nop
 8003d04:	40023800 	.word	0x40023800
 8003d08:	42470000 	.word	0x42470000
 8003d0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d10:	4b8a      	ldr	r3, [pc, #552]	; (8003f3c <HAL_RCC_OscConfig+0x4a8>)
 8003d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1e9      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 8097 	beq.w	8003e58 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d2e:	4b83      	ldr	r3, [pc, #524]	; (8003f3c <HAL_RCC_OscConfig+0x4a8>)
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10f      	bne.n	8003d5a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	4b7f      	ldr	r3, [pc, #508]	; (8003f3c <HAL_RCC_OscConfig+0x4a8>)
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	4a7e      	ldr	r2, [pc, #504]	; (8003f3c <HAL_RCC_OscConfig+0x4a8>)
 8003d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d48:	6413      	str	r3, [r2, #64]	; 0x40
 8003d4a:	4b7c      	ldr	r3, [pc, #496]	; (8003f3c <HAL_RCC_OscConfig+0x4a8>)
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003d56:	2301      	movs	r3, #1
 8003d58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d5a:	4b79      	ldr	r3, [pc, #484]	; (8003f40 <HAL_RCC_OscConfig+0x4ac>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d118      	bne.n	8003d98 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d66:	4b76      	ldr	r3, [pc, #472]	; (8003f40 <HAL_RCC_OscConfig+0x4ac>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a75      	ldr	r2, [pc, #468]	; (8003f40 <HAL_RCC_OscConfig+0x4ac>)
 8003d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d72:	f7fd fb95 	bl	80014a0 <HAL_GetTick>
 8003d76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d78:	e008      	b.n	8003d8c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d7a:	f7fd fb91 	bl	80014a0 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e0d3      	b.n	8003f34 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d8c:	4b6c      	ldr	r3, [pc, #432]	; (8003f40 <HAL_RCC_OscConfig+0x4ac>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0f0      	beq.n	8003d7a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d106      	bne.n	8003dae <HAL_RCC_OscConfig+0x31a>
 8003da0:	4b66      	ldr	r3, [pc, #408]	; (8003f3c <HAL_RCC_OscConfig+0x4a8>)
 8003da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da4:	4a65      	ldr	r2, [pc, #404]	; (8003f3c <HAL_RCC_OscConfig+0x4a8>)
 8003da6:	f043 0301 	orr.w	r3, r3, #1
 8003daa:	6713      	str	r3, [r2, #112]	; 0x70
 8003dac:	e01c      	b.n	8003de8 <HAL_RCC_OscConfig+0x354>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	2b05      	cmp	r3, #5
 8003db4:	d10c      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x33c>
 8003db6:	4b61      	ldr	r3, [pc, #388]	; (8003f3c <HAL_RCC_OscConfig+0x4a8>)
 8003db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dba:	4a60      	ldr	r2, [pc, #384]	; (8003f3c <HAL_RCC_OscConfig+0x4a8>)
 8003dbc:	f043 0304 	orr.w	r3, r3, #4
 8003dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc2:	4b5e      	ldr	r3, [pc, #376]	; (8003f3c <HAL_RCC_OscConfig+0x4a8>)
 8003dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc6:	4a5d      	ldr	r2, [pc, #372]	; (8003f3c <HAL_RCC_OscConfig+0x4a8>)
 8003dc8:	f043 0301 	orr.w	r3, r3, #1
 8003dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8003dce:	e00b      	b.n	8003de8 <HAL_RCC_OscConfig+0x354>
 8003dd0:	4b5a      	ldr	r3, [pc, #360]	; (8003f3c <HAL_RCC_OscConfig+0x4a8>)
 8003dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd4:	4a59      	ldr	r2, [pc, #356]	; (8003f3c <HAL_RCC_OscConfig+0x4a8>)
 8003dd6:	f023 0301 	bic.w	r3, r3, #1
 8003dda:	6713      	str	r3, [r2, #112]	; 0x70
 8003ddc:	4b57      	ldr	r3, [pc, #348]	; (8003f3c <HAL_RCC_OscConfig+0x4a8>)
 8003dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de0:	4a56      	ldr	r2, [pc, #344]	; (8003f3c <HAL_RCC_OscConfig+0x4a8>)
 8003de2:	f023 0304 	bic.w	r3, r3, #4
 8003de6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d015      	beq.n	8003e1c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df0:	f7fd fb56 	bl	80014a0 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003df6:	e00a      	b.n	8003e0e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003df8:	f7fd fb52 	bl	80014a0 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e092      	b.n	8003f34 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e0e:	4b4b      	ldr	r3, [pc, #300]	; (8003f3c <HAL_RCC_OscConfig+0x4a8>)
 8003e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0ee      	beq.n	8003df8 <HAL_RCC_OscConfig+0x364>
 8003e1a:	e014      	b.n	8003e46 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e1c:	f7fd fb40 	bl	80014a0 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e22:	e00a      	b.n	8003e3a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e24:	f7fd fb3c 	bl	80014a0 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e07c      	b.n	8003f34 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e3a:	4b40      	ldr	r3, [pc, #256]	; (8003f3c <HAL_RCC_OscConfig+0x4a8>)
 8003e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1ee      	bne.n	8003e24 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e46:	7dfb      	ldrb	r3, [r7, #23]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d105      	bne.n	8003e58 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e4c:	4b3b      	ldr	r3, [pc, #236]	; (8003f3c <HAL_RCC_OscConfig+0x4a8>)
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	4a3a      	ldr	r2, [pc, #232]	; (8003f3c <HAL_RCC_OscConfig+0x4a8>)
 8003e52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d068      	beq.n	8003f32 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e60:	4b36      	ldr	r3, [pc, #216]	; (8003f3c <HAL_RCC_OscConfig+0x4a8>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f003 030c 	and.w	r3, r3, #12
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d060      	beq.n	8003f2e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d145      	bne.n	8003f00 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e74:	4b33      	ldr	r3, [pc, #204]	; (8003f44 <HAL_RCC_OscConfig+0x4b0>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7a:	f7fd fb11 	bl	80014a0 <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e80:	e008      	b.n	8003e94 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e82:	f7fd fb0d 	bl	80014a0 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e04f      	b.n	8003f34 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e94:	4b29      	ldr	r3, [pc, #164]	; (8003f3c <HAL_RCC_OscConfig+0x4a8>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1f0      	bne.n	8003e82 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	69da      	ldr	r2, [r3, #28]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	019b      	lsls	r3, r3, #6
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb6:	085b      	lsrs	r3, r3, #1
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	041b      	lsls	r3, r3, #16
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	061b      	lsls	r3, r3, #24
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eca:	071b      	lsls	r3, r3, #28
 8003ecc:	491b      	ldr	r1, [pc, #108]	; (8003f3c <HAL_RCC_OscConfig+0x4a8>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ed2:	4b1c      	ldr	r3, [pc, #112]	; (8003f44 <HAL_RCC_OscConfig+0x4b0>)
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed8:	f7fd fae2 	bl	80014a0 <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ee0:	f7fd fade 	bl	80014a0 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e020      	b.n	8003f34 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ef2:	4b12      	ldr	r3, [pc, #72]	; (8003f3c <HAL_RCC_OscConfig+0x4a8>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0f0      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x44c>
 8003efe:	e018      	b.n	8003f32 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f00:	4b10      	ldr	r3, [pc, #64]	; (8003f44 <HAL_RCC_OscConfig+0x4b0>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f06:	f7fd facb 	bl	80014a0 <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f0c:	e008      	b.n	8003f20 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f0e:	f7fd fac7 	bl	80014a0 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e009      	b.n	8003f34 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f20:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <HAL_RCC_OscConfig+0x4a8>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1f0      	bne.n	8003f0e <HAL_RCC_OscConfig+0x47a>
 8003f2c:	e001      	b.n	8003f32 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e000      	b.n	8003f34 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3718      	adds	r7, #24
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	40007000 	.word	0x40007000
 8003f44:	42470060 	.word	0x42470060

08003f48 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
 8003f54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f56:	2300      	movs	r3, #0
 8003f58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch(protocol)
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	2b04      	cmp	r3, #4
 8003f5e:	d81f      	bhi.n	8003fa0 <HAL_SAI_InitProtocol+0x58>
 8003f60:	a201      	add	r2, pc, #4	; (adr r2, 8003f68 <HAL_SAI_InitProtocol+0x20>)
 8003f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f66:	bf00      	nop
 8003f68:	08003f7d 	.word	0x08003f7d
 8003f6c:	08003f7d 	.word	0x08003f7d
 8003f70:	08003f7d 	.word	0x08003f7d
 8003f74:	08003f8f 	.word	0x08003f8f
 8003f78:	08003f8f 	.word	0x08003f8f
  {
  case SAI_I2S_STANDARD :
  case SAI_I2S_MSBJUSTIFIED :
  case SAI_I2S_LSBJUSTIFIED :
    status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	68b9      	ldr	r1, [r7, #8]
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 f940 	bl	8004208 <SAI_InitI2S>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	75fb      	strb	r3, [r7, #23]
    break;
 8003f8c:	e00b      	b.n	8003fa6 <HAL_SAI_InitProtocol+0x5e>
  case SAI_PCM_LONG :
  case SAI_PCM_SHORT :
    status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	68b9      	ldr	r1, [r7, #8]
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 f9e5 	bl	8004364 <SAI_InitPCM>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	75fb      	strb	r3, [r7, #23]
    break;
 8003f9e:	e002      	b.n	8003fa6 <HAL_SAI_InitProtocol+0x5e>
  default :
    status = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	75fb      	strb	r3, [r7, #23]
    break;
 8003fa4:	bf00      	nop
  }

  if(status == HAL_OK)
 8003fa6:	7dfb      	ldrb	r3, [r7, #23]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d104      	bne.n	8003fb6 <HAL_SAI_InitProtocol+0x6e>
  {
    status = HAL_SAI_Init(hsai);
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 f807 	bl	8003fc0 <HAL_SAI_Init>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3718      	adds	r7, #24
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e107      	b.n	80041f2 <HAL_SAI_Init+0x232>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d106      	bne.n	8003ffc <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7fd f8e8 	bl	80011cc <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 fa2d 	bl	8004464 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 fa60 	bl	80044d0 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d027      	beq.n	8004068 <HAL_SAI_Init+0xa8>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 fa99 	bl	8004550 <SAI_GetInputClock>
 800401e:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	4613      	mov	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	461a      	mov	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	025b      	lsls	r3, r3, #9
 8004032:	fbb2 f3f3 	udiv	r3, r2, r3
 8004036:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4a70      	ldr	r2, [pc, #448]	; (80041fc <HAL_SAI_Init+0x23c>)
 800403c:	fba2 2303 	umull	r2, r3, r2, r3
 8004040:	08da      	lsrs	r2, r3, #3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if((tmpregisterGCR % 10U) > 8U)
 8004046:	68f9      	ldr	r1, [r7, #12]
 8004048:	4b6c      	ldr	r3, [pc, #432]	; (80041fc <HAL_SAI_Init+0x23c>)
 800404a:	fba3 2301 	umull	r2, r3, r3, r1
 800404e:	08da      	lsrs	r2, r3, #3
 8004050:	4613      	mov	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	1aca      	subs	r2, r1, r3
 800405a:	2a08      	cmp	r2, #8
 800405c:	d904      	bls.n	8004068 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv+= 1U;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	1c5a      	adds	r2, r3, #1
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d003      	beq.n	8004078 <HAL_SAI_Init+0xb8>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	2b02      	cmp	r3, #2
 8004076:	d109      	bne.n	800408c <HAL_SAI_Init+0xcc>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U: SAI_xCR1_CKSTR;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407c:	2b01      	cmp	r3, #1
 800407e:	d101      	bne.n	8004084 <HAL_SAI_Init+0xc4>
 8004080:	2300      	movs	r3, #0
 8004082:	e001      	b.n	8004088 <HAL_SAI_Init+0xc8>
 8004084:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004088:	617b      	str	r3, [r7, #20]
 800408a:	e008      	b.n	800409e <HAL_SAI_Init+0xde>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR: 0U;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004090:	2b01      	cmp	r3, #1
 8004092:	d102      	bne.n	800409a <HAL_SAI_Init+0xda>
 8004094:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004098:	e000      	b.n	800409c <HAL_SAI_Init+0xdc>
 800409a:	2300      	movs	r3, #0
 800409c:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch(hsai->Init.Synchro)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	2b03      	cmp	r3, #3
 80040a4:	d815      	bhi.n	80040d2 <HAL_SAI_Init+0x112>
 80040a6:	a201      	add	r2, pc, #4	; (adr r2, 80040ac <HAL_SAI_Init+0xec>)
 80040a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ac:	080040bd 	.word	0x080040bd
 80040b0:	080040c3 	.word	0x080040c3
 80040b4:	080040cb 	.word	0x080040cb
 80040b8:	080040cb 	.word	0x080040cb
  {
  case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	613b      	str	r3, [r7, #16]
    }
    break;
 80040c0:	e008      	b.n	80040d4 <HAL_SAI_Init+0x114>
  case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80040c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040c6:	613b      	str	r3, [r7, #16]
    }
    break;
 80040c8:	e004      	b.n	80040d4 <HAL_SAI_Init+0x114>
  case SAI_SYNCHRONOUS_EXT_SAI1 :
  case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80040ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040ce:	613b      	str	r3, [r7, #16]
    }
    break;
 80040d0:	e000      	b.n	80040d4 <HAL_SAI_Init+0x114>
  default:
    break;
 80040d2:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6819      	ldr	r1, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	4b48      	ldr	r3, [pc, #288]	; (8004200 <HAL_SAI_Init+0x240>)
 80040e0:	400b      	ands	r3, r1
 80040e2:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6819      	ldr	r1, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80040f8:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fe:	431a      	orrs	r2, r3
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 800410c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004118:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	051b      	lsls	r3, r3, #20
 8004120:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	6812      	ldr	r2, [r2, #0]
 8004134:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004138:	f023 030f 	bic.w	r3, r3, #15
 800413c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6859      	ldr	r1, [r3, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	699a      	ldr	r2, [r3, #24]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414c:	431a      	orrs	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6899      	ldr	r1, [r3, #8]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	4b27      	ldr	r3, [pc, #156]	; (8004204 <HAL_SAI_Init+0x244>)
 8004168:	400b      	ands	r3, r1
 800416a:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1U) |
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6899      	ldr	r1, [r3, #8]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004176:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset     |
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1U) |
 800417c:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSOffset     |
 8004182:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                          hsai->FrameInit.FSDefinition |
 8004188:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800418e:	3b01      	subs	r3, #1
 8004190:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8004192:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1U) |
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	430a      	orrs	r2, r1
 800419a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68d9      	ldr	r1, [r3, #12]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	f24f 0320 	movw	r3, #61472	; 0xf020
 80041aa:	400b      	ands	r3, r1
 80041ac:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN );

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68d9      	ldr	r1, [r3, #12]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041bc:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041c2:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80041c4:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ca:	3b01      	subs	r3, #1
 80041cc:	021b      	lsls	r3, r3, #8
 80041ce:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3718      	adds	r7, #24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	cccccccd 	.word	0xcccccccd
 8004200:	ff05c010 	.word	0xff05c010
 8004204:	fff88000 	.word	0xfff88000

08004208 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Compute ClockStrobing according AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <SAI_InitI2S+0x2a>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2b02      	cmp	r3, #2
 8004230:	d103      	bne.n	800423a <SAI_InitI2S+0x32>
  { /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	641a      	str	r2, [r3, #64]	; 0x40
 8004238:	e002      	b.n	8004240 <SAI_InitI2S+0x38>
  }
  else
  { /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2201      	movs	r2, #1
 800423e:	641a      	str	r2, [r3, #64]	; 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004246:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800424e:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0U;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	661a      	str	r2, [r3, #96]	; 0x60

  /* in IS2 the number of slot must be even */
  if((nbslot & 0x1U) != 0U)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e076      	b.n	8004358 <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d107      	bne.n	8004280 <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	651a      	str	r2, [r3, #80]	; 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800427c:	655a      	str	r2, [r3, #84]	; 0x54
 800427e:	e006      	b.n	800428e <SAI_InitI2S+0x86>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004286:	651a      	str	r2, [r3, #80]	; 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Frame definition */
  switch(datasize)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b03      	cmp	r3, #3
 8004292:	d84f      	bhi.n	8004334 <SAI_InitI2S+0x12c>
 8004294:	a201      	add	r2, pc, #4	; (adr r2, 800429c <SAI_InitI2S+0x94>)
 8004296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800429a:	bf00      	nop
 800429c:	080042ad 	.word	0x080042ad
 80042a0:	080042cf 	.word	0x080042cf
 80042a4:	080042f1 	.word	0x080042f1
 80042a8:	08004313 	.word	0x08004313
  {
  case SAI_PROTOCOL_DATASIZE_16BIT:
    hsai->Init.DataSize = SAI_DATASIZE_16;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2280      	movs	r2, #128	; 0x80
 80042b0:	639a      	str	r2, [r3, #56]	; 0x38
    hsai->FrameInit.FrameLength = 32U*(nbslot/2U);
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	085b      	lsrs	r3, r3, #1
 80042b6:	015a      	lsls	r2, r3, #5
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	645a      	str	r2, [r3, #68]	; 0x44
    hsai->FrameInit.ActiveFrameLength = 16U*(nbslot/2U);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	085b      	lsrs	r3, r3, #1
 80042c0:	011a      	lsls	r2, r3, #4
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	649a      	str	r2, [r3, #72]	; 0x48
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2240      	movs	r2, #64	; 0x40
 80042ca:	65da      	str	r2, [r3, #92]	; 0x5c
    break;
 80042cc:	e034      	b.n	8004338 <SAI_InitI2S+0x130>
  case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
    hsai->Init.DataSize = SAI_DATASIZE_16;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2280      	movs	r2, #128	; 0x80
 80042d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsai->FrameInit.FrameLength = 64U*(nbslot/2U);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	085b      	lsrs	r3, r3, #1
 80042d8:	019a      	lsls	r2, r3, #6
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	645a      	str	r2, [r3, #68]	; 0x44
    hsai->FrameInit.ActiveFrameLength = 32U*(nbslot/2U);
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	085b      	lsrs	r3, r3, #1
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	649a      	str	r2, [r3, #72]	; 0x48
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2280      	movs	r2, #128	; 0x80
 80042ec:	65da      	str	r2, [r3, #92]	; 0x5c
    break;
 80042ee:	e023      	b.n	8004338 <SAI_InitI2S+0x130>
  case SAI_PROTOCOL_DATASIZE_24BIT:
    hsai->Init.DataSize = SAI_DATASIZE_24;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	22c0      	movs	r2, #192	; 0xc0
 80042f4:	639a      	str	r2, [r3, #56]	; 0x38
    hsai->FrameInit.FrameLength = 64U*(nbslot/2U);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	085b      	lsrs	r3, r3, #1
 80042fa:	019a      	lsls	r2, r3, #6
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	645a      	str	r2, [r3, #68]	; 0x44
    hsai->FrameInit.ActiveFrameLength = 32U*(nbslot/2U);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	085b      	lsrs	r3, r3, #1
 8004304:	015a      	lsls	r2, r3, #5
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	649a      	str	r2, [r3, #72]	; 0x48
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2280      	movs	r2, #128	; 0x80
 800430e:	65da      	str	r2, [r3, #92]	; 0x5c
    break;
 8004310:	e012      	b.n	8004338 <SAI_InitI2S+0x130>
  case SAI_PROTOCOL_DATASIZE_32BIT:
    hsai->Init.DataSize = SAI_DATASIZE_32;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	22e0      	movs	r2, #224	; 0xe0
 8004316:	639a      	str	r2, [r3, #56]	; 0x38
    hsai->FrameInit.FrameLength = 64U*(nbslot/2U);
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	085b      	lsrs	r3, r3, #1
 800431c:	019a      	lsls	r2, r3, #6
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	645a      	str	r2, [r3, #68]	; 0x44
    hsai->FrameInit.ActiveFrameLength = 32U*(nbslot/2U);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	085b      	lsrs	r3, r3, #1
 8004326:	015a      	lsls	r2, r3, #5
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	649a      	str	r2, [r3, #72]	; 0x48
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2280      	movs	r2, #128	; 0x80
 8004330:	65da      	str	r2, [r3, #92]	; 0x5c
    break;
 8004332:	e001      	b.n	8004338 <SAI_InitI2S+0x130>
  default :
    return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e00f      	b.n	8004358 <SAI_InitI2S+0x150>
  }
  if(protocol == SAI_I2S_LSBJUSTIFIED)
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	2b02      	cmp	r3, #2
 800433c:	d10b      	bne.n	8004356 <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d102      	bne.n	800434a <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16U;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2210      	movs	r2, #16
 8004348:	659a      	str	r2, [r3, #88]	; 0x58
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b02      	cmp	r3, #2
 800434e:	d102      	bne.n	8004356 <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8U;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2208      	movs	r2, #8
 8004354:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
 8004370:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Compute ClockStrobing according AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <SAI_InitPCM+0x2a>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	2b02      	cmp	r3, #2
 800438c:	d103      	bne.n	8004396 <SAI_InitPCM+0x32>
  { /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2201      	movs	r2, #1
 8004392:	641a      	str	r2, [r3, #64]	; 0x40
 8004394:	e002      	b.n	800439c <SAI_InitPCM+0x38>
  }
  else
  { /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	641a      	str	r2, [r3, #64]	; 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043a8:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80043b0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.FirstBitOffset  = 0U;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043c4:	665a      	str	r2, [r3, #100]	; 0x64

  if (protocol == SAI_PCM_SHORT)
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	2b04      	cmp	r3, #4
 80043ca:	d103      	bne.n	80043d4 <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2201      	movs	r2, #1
 80043d0:	649a      	str	r2, [r3, #72]	; 0x48
 80043d2:	e002      	b.n	80043da <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	220d      	movs	r2, #13
 80043d8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  switch(datasize)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b03      	cmp	r3, #3
 80043de:	d837      	bhi.n	8004450 <SAI_InitPCM+0xec>
 80043e0:	a201      	add	r2, pc, #4	; (adr r2, 80043e8 <SAI_InitPCM+0x84>)
 80043e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e6:	bf00      	nop
 80043e8:	080043f9 	.word	0x080043f9
 80043ec:	0800440f 	.word	0x0800440f
 80043f0:	08004425 	.word	0x08004425
 80043f4:	0800443b 	.word	0x0800443b
  {
  case SAI_PROTOCOL_DATASIZE_16BIT:
    hsai->Init.DataSize = SAI_DATASIZE_16;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2280      	movs	r2, #128	; 0x80
 80043fc:	639a      	str	r2, [r3, #56]	; 0x38
    hsai->FrameInit.FrameLength = 16U * nbslot;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	011a      	lsls	r2, r3, #4
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	645a      	str	r2, [r3, #68]	; 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2240      	movs	r2, #64	; 0x40
 800440a:	65da      	str	r2, [r3, #92]	; 0x5c
    break;
 800440c:	e022      	b.n	8004454 <SAI_InitPCM+0xf0>
  case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
    hsai->Init.DataSize = SAI_DATASIZE_16;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2280      	movs	r2, #128	; 0x80
 8004412:	639a      	str	r2, [r3, #56]	; 0x38
    hsai->FrameInit.FrameLength = 32U * nbslot;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	645a      	str	r2, [r3, #68]	; 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2280      	movs	r2, #128	; 0x80
 8004420:	65da      	str	r2, [r3, #92]	; 0x5c
    break;
 8004422:	e017      	b.n	8004454 <SAI_InitPCM+0xf0>
  case SAI_PROTOCOL_DATASIZE_24BIT :
    hsai->Init.DataSize = SAI_DATASIZE_24;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	22c0      	movs	r2, #192	; 0xc0
 8004428:	639a      	str	r2, [r3, #56]	; 0x38
    hsai->FrameInit.FrameLength = 32U * nbslot;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	015a      	lsls	r2, r3, #5
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	645a      	str	r2, [r3, #68]	; 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2280      	movs	r2, #128	; 0x80
 8004436:	65da      	str	r2, [r3, #92]	; 0x5c
    break;
 8004438:	e00c      	b.n	8004454 <SAI_InitPCM+0xf0>
  case SAI_PROTOCOL_DATASIZE_32BIT:
    hsai->Init.DataSize = SAI_DATASIZE_32;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	22e0      	movs	r2, #224	; 0xe0
 800443e:	639a      	str	r2, [r3, #56]	; 0x38
    hsai->FrameInit.FrameLength = 32U * nbslot;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	015a      	lsls	r2, r3, #5
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	645a      	str	r2, [r3, #68]	; 0x44
    hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2280      	movs	r2, #128	; 0x80
 800444c:	65da      	str	r2, [r3, #92]	; 0x5c
    break;
 800444e:	e001      	b.n	8004454 <SAI_InitPCM+0xf0>
  default :
    return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e000      	b.n	8004456 <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop

08004464 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8004464:	b490      	push	{r4, r7}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7U/1000U);
 800446c:	4b16      	ldr	r3, [pc, #88]	; (80044c8 <SAI_Disable+0x64>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a16      	ldr	r2, [pc, #88]	; (80044cc <SAI_Disable+0x68>)
 8004472:	fba2 2303 	umull	r2, r3, r2, r3
 8004476:	0b1b      	lsrs	r3, r3, #12
 8004478:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800447a:	2300      	movs	r3, #0
 800447c:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800448c:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 800448e:	4623      	mov	r3, r4
 8004490:	1e5c      	subs	r4, r3, #1
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10a      	bne.n	80044ac <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800449c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      status = HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	73fb      	strb	r3, [r7, #15]
      break;
 80044aa:	e006      	b.n	80044ba <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1e9      	bne.n	800448e <SAI_Disable+0x2a>

  return status;
 80044ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bc90      	pop	{r4, r7}
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	20000000 	.word	0x20000000
 80044cc:	95cbec1b 	.word	0x95cbec1b

080044d0 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.   
  * @retval SAI Clock Input 
  */
void SAI_BlockSynchroConfig(SAI_HandleTypeDef *hsai)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;

#if defined(STM32F446xx)  
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d007      	beq.n	80044f0 <SAI_BlockSynchroConfig+0x20>
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d302      	bcc.n	80044ea <SAI_BlockSynchroConfig+0x1a>
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d006      	beq.n	80044f6 <SAI_BlockSynchroConfig+0x26>
 80044e8:	e008      	b.n	80044fc <SAI_BlockSynchroConfig+0x2c>
  {
  case SAI_SYNCEXT_DISABLE :
    tmpregisterGCR = 0U;
 80044ea:	2300      	movs	r3, #0
 80044ec:	60fb      	str	r3, [r7, #12]
    break;
 80044ee:	e008      	b.n	8004502 <SAI_BlockSynchroConfig+0x32>
  case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
    tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80044f0:	2310      	movs	r3, #16
 80044f2:	60fb      	str	r3, [r7, #12]
    break;
 80044f4:	e005      	b.n	8004502 <SAI_BlockSynchroConfig+0x32>
  case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
    tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80044f6:	2320      	movs	r3, #32
 80044f8:	60fb      	str	r3, [r7, #12]
    break;
 80044fa:	e002      	b.n	8004502 <SAI_BlockSynchroConfig+0x32>
  default:
    tmpregisterGCR = 0U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	60fb      	str	r3, [r7, #12]
    break;
 8004500:	bf00      	nop
  }

  if((hsai->Init.Synchro) == SAI_SYNCHRONOUS_EXT_SAI2)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	2b03      	cmp	r3, #3
 8004508:	d103      	bne.n	8004512 <SAI_BlockSynchroConfig+0x42>
  {
    tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f043 0301 	orr.w	r3, r3, #1
 8004510:	60fb      	str	r3, [r7, #12]
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a0a      	ldr	r2, [pc, #40]	; (8004540 <SAI_BlockSynchroConfig+0x70>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d004      	beq.n	8004526 <SAI_BlockSynchroConfig+0x56>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a08      	ldr	r2, [pc, #32]	; (8004544 <SAI_BlockSynchroConfig+0x74>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d103      	bne.n	800452e <SAI_BlockSynchroConfig+0x5e>
  {
    SAI1->GCR = tmpregisterGCR;
 8004526:	4a08      	ldr	r2, [pc, #32]	; (8004548 <SAI_BlockSynchroConfig+0x78>)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6013      	str	r3, [r2, #0]
 800452c:	e002      	b.n	8004534 <SAI_BlockSynchroConfig+0x64>
  }
  else 
  {
    SAI2->GCR = tmpregisterGCR;
 800452e:	4a07      	ldr	r2, [pc, #28]	; (800454c <SAI_BlockSynchroConfig+0x7c>)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6013      	str	r3, [r2, #0]
    tmpregisterGCR = 0U;
    break;
  }
  SAI1->GCR = tmpregisterGCR;
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */ 
}
 8004534:	bf00      	nop
 8004536:	3714      	adds	r7, #20
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	40015804 	.word	0x40015804
 8004544:	40015824 	.word	0x40015824
 8004548:	40015800 	.word	0x40015800
 800454c:	40015c00 	.word	0x40015c00

08004550 <SAI_GetInputClock>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.   
  * @retval SAI Clock Input 
  */
uint32_t SAI_GetInputClock(SAI_HandleTypeDef *hsai)   
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 8004558:	2300      	movs	r3, #0
 800455a:	60fb      	str	r3, [r7, #12]
  
#if defined(STM32F446xx)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a0a      	ldr	r2, [pc, #40]	; (800458c <SAI_GetInputClock+0x3c>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d004      	beq.n	8004570 <SAI_GetInputClock+0x20>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a09      	ldr	r2, [pc, #36]	; (8004590 <SAI_GetInputClock+0x40>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d104      	bne.n	800457a <SAI_GetInputClock+0x2a>
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004570:	2004      	movs	r0, #4
 8004572:	f7fe ff1f 	bl	80033b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	e003      	b.n	8004582 <SAI_GetInputClock+0x32>
  }
  else /* SAI2_Block_A || SAI2_Block_B*/
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2); 
 800457a:	2008      	movs	r0, #8
 800457c:	f7fe ff1a 	bl	80033b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004580:	60f8      	str	r0, [r7, #12]
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#endif /* STM32F413xx || STM32F423xx */  
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
       /* the return result is the value of SAI clock */
  return saiclocksource;
 8004582:	68fb      	ldr	r3, [r7, #12]
}
 8004584:	4618      	mov	r0, r3
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	40015804 	.word	0x40015804
 8004590:	40015824 	.word	0x40015824

08004594 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e04e      	b.n	8004644 <HAL_SPDIFRX_Init+0xb0>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d106      	bne.n	80045c0 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7fc fcdc 	bl	8000f78 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0203 	bic.w	r2, r2, #3
 80045d6:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f423 23ef 	bic.w	r3, r3, #489472	; 0x77800
 80045e6:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80045ea:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 80045f4:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 80045fa:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8004600:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8004606:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800460c:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8004612:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8004618:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800461e:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8004624:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	4313      	orrs	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e03f      	b.n	80046de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d106      	bne.n	8004678 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7fc fcf6 	bl	8001064 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2224      	movs	r2, #36	; 0x24
 800467c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68da      	ldr	r2, [r3, #12]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800468e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 f829 	bl	80046e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	691a      	ldr	r2, [r3, #16]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	695a      	ldr	r2, [r3, #20]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68da      	ldr	r2, [r3, #12]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2220      	movs	r2, #32
 80046d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2220      	movs	r2, #32
 80046d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
	...

080046e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ec:	b085      	sub	sp, #20
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68da      	ldr	r2, [r3, #12]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	431a      	orrs	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	431a      	orrs	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	4313      	orrs	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800472a:	f023 030c 	bic.w	r3, r3, #12
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	6812      	ldr	r2, [r2, #0]
 8004732:	68f9      	ldr	r1, [r7, #12]
 8004734:	430b      	orrs	r3, r1
 8004736:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	699a      	ldr	r2, [r3, #24]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004756:	f040 818b 	bne.w	8004a70 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4ac1      	ldr	r2, [pc, #772]	; (8004a64 <UART_SetConfig+0x37c>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d005      	beq.n	8004770 <UART_SetConfig+0x88>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4abf      	ldr	r2, [pc, #764]	; (8004a68 <UART_SetConfig+0x380>)
 800476a:	4293      	cmp	r3, r2
 800476c:	f040 80bd 	bne.w	80048ea <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004770:	f7fe fae2 	bl	8002d38 <HAL_RCC_GetPCLK2Freq>
 8004774:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	461d      	mov	r5, r3
 800477a:	f04f 0600 	mov.w	r6, #0
 800477e:	46a8      	mov	r8, r5
 8004780:	46b1      	mov	r9, r6
 8004782:	eb18 0308 	adds.w	r3, r8, r8
 8004786:	eb49 0409 	adc.w	r4, r9, r9
 800478a:	4698      	mov	r8, r3
 800478c:	46a1      	mov	r9, r4
 800478e:	eb18 0805 	adds.w	r8, r8, r5
 8004792:	eb49 0906 	adc.w	r9, r9, r6
 8004796:	f04f 0100 	mov.w	r1, #0
 800479a:	f04f 0200 	mov.w	r2, #0
 800479e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80047a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80047a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80047aa:	4688      	mov	r8, r1
 80047ac:	4691      	mov	r9, r2
 80047ae:	eb18 0005 	adds.w	r0, r8, r5
 80047b2:	eb49 0106 	adc.w	r1, r9, r6
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	461d      	mov	r5, r3
 80047bc:	f04f 0600 	mov.w	r6, #0
 80047c0:	196b      	adds	r3, r5, r5
 80047c2:	eb46 0406 	adc.w	r4, r6, r6
 80047c6:	461a      	mov	r2, r3
 80047c8:	4623      	mov	r3, r4
 80047ca:	f7fb fd1b 	bl	8000204 <__aeabi_uldivmod>
 80047ce:	4603      	mov	r3, r0
 80047d0:	460c      	mov	r4, r1
 80047d2:	461a      	mov	r2, r3
 80047d4:	4ba5      	ldr	r3, [pc, #660]	; (8004a6c <UART_SetConfig+0x384>)
 80047d6:	fba3 2302 	umull	r2, r3, r3, r2
 80047da:	095b      	lsrs	r3, r3, #5
 80047dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	461d      	mov	r5, r3
 80047e4:	f04f 0600 	mov.w	r6, #0
 80047e8:	46a9      	mov	r9, r5
 80047ea:	46b2      	mov	sl, r6
 80047ec:	eb19 0309 	adds.w	r3, r9, r9
 80047f0:	eb4a 040a 	adc.w	r4, sl, sl
 80047f4:	4699      	mov	r9, r3
 80047f6:	46a2      	mov	sl, r4
 80047f8:	eb19 0905 	adds.w	r9, r9, r5
 80047fc:	eb4a 0a06 	adc.w	sl, sl, r6
 8004800:	f04f 0100 	mov.w	r1, #0
 8004804:	f04f 0200 	mov.w	r2, #0
 8004808:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800480c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004810:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004814:	4689      	mov	r9, r1
 8004816:	4692      	mov	sl, r2
 8004818:	eb19 0005 	adds.w	r0, r9, r5
 800481c:	eb4a 0106 	adc.w	r1, sl, r6
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	461d      	mov	r5, r3
 8004826:	f04f 0600 	mov.w	r6, #0
 800482a:	196b      	adds	r3, r5, r5
 800482c:	eb46 0406 	adc.w	r4, r6, r6
 8004830:	461a      	mov	r2, r3
 8004832:	4623      	mov	r3, r4
 8004834:	f7fb fce6 	bl	8000204 <__aeabi_uldivmod>
 8004838:	4603      	mov	r3, r0
 800483a:	460c      	mov	r4, r1
 800483c:	461a      	mov	r2, r3
 800483e:	4b8b      	ldr	r3, [pc, #556]	; (8004a6c <UART_SetConfig+0x384>)
 8004840:	fba3 1302 	umull	r1, r3, r3, r2
 8004844:	095b      	lsrs	r3, r3, #5
 8004846:	2164      	movs	r1, #100	; 0x64
 8004848:	fb01 f303 	mul.w	r3, r1, r3
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	00db      	lsls	r3, r3, #3
 8004850:	3332      	adds	r3, #50	; 0x32
 8004852:	4a86      	ldr	r2, [pc, #536]	; (8004a6c <UART_SetConfig+0x384>)
 8004854:	fba2 2303 	umull	r2, r3, r2, r3
 8004858:	095b      	lsrs	r3, r3, #5
 800485a:	005b      	lsls	r3, r3, #1
 800485c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004860:	4498      	add	r8, r3
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	461d      	mov	r5, r3
 8004866:	f04f 0600 	mov.w	r6, #0
 800486a:	46a9      	mov	r9, r5
 800486c:	46b2      	mov	sl, r6
 800486e:	eb19 0309 	adds.w	r3, r9, r9
 8004872:	eb4a 040a 	adc.w	r4, sl, sl
 8004876:	4699      	mov	r9, r3
 8004878:	46a2      	mov	sl, r4
 800487a:	eb19 0905 	adds.w	r9, r9, r5
 800487e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004882:	f04f 0100 	mov.w	r1, #0
 8004886:	f04f 0200 	mov.w	r2, #0
 800488a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800488e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004892:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004896:	4689      	mov	r9, r1
 8004898:	4692      	mov	sl, r2
 800489a:	eb19 0005 	adds.w	r0, r9, r5
 800489e:	eb4a 0106 	adc.w	r1, sl, r6
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	461d      	mov	r5, r3
 80048a8:	f04f 0600 	mov.w	r6, #0
 80048ac:	196b      	adds	r3, r5, r5
 80048ae:	eb46 0406 	adc.w	r4, r6, r6
 80048b2:	461a      	mov	r2, r3
 80048b4:	4623      	mov	r3, r4
 80048b6:	f7fb fca5 	bl	8000204 <__aeabi_uldivmod>
 80048ba:	4603      	mov	r3, r0
 80048bc:	460c      	mov	r4, r1
 80048be:	461a      	mov	r2, r3
 80048c0:	4b6a      	ldr	r3, [pc, #424]	; (8004a6c <UART_SetConfig+0x384>)
 80048c2:	fba3 1302 	umull	r1, r3, r3, r2
 80048c6:	095b      	lsrs	r3, r3, #5
 80048c8:	2164      	movs	r1, #100	; 0x64
 80048ca:	fb01 f303 	mul.w	r3, r1, r3
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	3332      	adds	r3, #50	; 0x32
 80048d4:	4a65      	ldr	r2, [pc, #404]	; (8004a6c <UART_SetConfig+0x384>)
 80048d6:	fba2 2303 	umull	r2, r3, r2, r3
 80048da:	095b      	lsrs	r3, r3, #5
 80048dc:	f003 0207 	and.w	r2, r3, #7
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4442      	add	r2, r8
 80048e6:	609a      	str	r2, [r3, #8]
 80048e8:	e26f      	b.n	8004dca <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048ea:	f7fe fa11 	bl	8002d10 <HAL_RCC_GetPCLK1Freq>
 80048ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	461d      	mov	r5, r3
 80048f4:	f04f 0600 	mov.w	r6, #0
 80048f8:	46a8      	mov	r8, r5
 80048fa:	46b1      	mov	r9, r6
 80048fc:	eb18 0308 	adds.w	r3, r8, r8
 8004900:	eb49 0409 	adc.w	r4, r9, r9
 8004904:	4698      	mov	r8, r3
 8004906:	46a1      	mov	r9, r4
 8004908:	eb18 0805 	adds.w	r8, r8, r5
 800490c:	eb49 0906 	adc.w	r9, r9, r6
 8004910:	f04f 0100 	mov.w	r1, #0
 8004914:	f04f 0200 	mov.w	r2, #0
 8004918:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800491c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004920:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004924:	4688      	mov	r8, r1
 8004926:	4691      	mov	r9, r2
 8004928:	eb18 0005 	adds.w	r0, r8, r5
 800492c:	eb49 0106 	adc.w	r1, r9, r6
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	461d      	mov	r5, r3
 8004936:	f04f 0600 	mov.w	r6, #0
 800493a:	196b      	adds	r3, r5, r5
 800493c:	eb46 0406 	adc.w	r4, r6, r6
 8004940:	461a      	mov	r2, r3
 8004942:	4623      	mov	r3, r4
 8004944:	f7fb fc5e 	bl	8000204 <__aeabi_uldivmod>
 8004948:	4603      	mov	r3, r0
 800494a:	460c      	mov	r4, r1
 800494c:	461a      	mov	r2, r3
 800494e:	4b47      	ldr	r3, [pc, #284]	; (8004a6c <UART_SetConfig+0x384>)
 8004950:	fba3 2302 	umull	r2, r3, r3, r2
 8004954:	095b      	lsrs	r3, r3, #5
 8004956:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	461d      	mov	r5, r3
 800495e:	f04f 0600 	mov.w	r6, #0
 8004962:	46a9      	mov	r9, r5
 8004964:	46b2      	mov	sl, r6
 8004966:	eb19 0309 	adds.w	r3, r9, r9
 800496a:	eb4a 040a 	adc.w	r4, sl, sl
 800496e:	4699      	mov	r9, r3
 8004970:	46a2      	mov	sl, r4
 8004972:	eb19 0905 	adds.w	r9, r9, r5
 8004976:	eb4a 0a06 	adc.w	sl, sl, r6
 800497a:	f04f 0100 	mov.w	r1, #0
 800497e:	f04f 0200 	mov.w	r2, #0
 8004982:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004986:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800498a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800498e:	4689      	mov	r9, r1
 8004990:	4692      	mov	sl, r2
 8004992:	eb19 0005 	adds.w	r0, r9, r5
 8004996:	eb4a 0106 	adc.w	r1, sl, r6
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	461d      	mov	r5, r3
 80049a0:	f04f 0600 	mov.w	r6, #0
 80049a4:	196b      	adds	r3, r5, r5
 80049a6:	eb46 0406 	adc.w	r4, r6, r6
 80049aa:	461a      	mov	r2, r3
 80049ac:	4623      	mov	r3, r4
 80049ae:	f7fb fc29 	bl	8000204 <__aeabi_uldivmod>
 80049b2:	4603      	mov	r3, r0
 80049b4:	460c      	mov	r4, r1
 80049b6:	461a      	mov	r2, r3
 80049b8:	4b2c      	ldr	r3, [pc, #176]	; (8004a6c <UART_SetConfig+0x384>)
 80049ba:	fba3 1302 	umull	r1, r3, r3, r2
 80049be:	095b      	lsrs	r3, r3, #5
 80049c0:	2164      	movs	r1, #100	; 0x64
 80049c2:	fb01 f303 	mul.w	r3, r1, r3
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	3332      	adds	r3, #50	; 0x32
 80049cc:	4a27      	ldr	r2, [pc, #156]	; (8004a6c <UART_SetConfig+0x384>)
 80049ce:	fba2 2303 	umull	r2, r3, r2, r3
 80049d2:	095b      	lsrs	r3, r3, #5
 80049d4:	005b      	lsls	r3, r3, #1
 80049d6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049da:	4498      	add	r8, r3
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	461d      	mov	r5, r3
 80049e0:	f04f 0600 	mov.w	r6, #0
 80049e4:	46a9      	mov	r9, r5
 80049e6:	46b2      	mov	sl, r6
 80049e8:	eb19 0309 	adds.w	r3, r9, r9
 80049ec:	eb4a 040a 	adc.w	r4, sl, sl
 80049f0:	4699      	mov	r9, r3
 80049f2:	46a2      	mov	sl, r4
 80049f4:	eb19 0905 	adds.w	r9, r9, r5
 80049f8:	eb4a 0a06 	adc.w	sl, sl, r6
 80049fc:	f04f 0100 	mov.w	r1, #0
 8004a00:	f04f 0200 	mov.w	r2, #0
 8004a04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a10:	4689      	mov	r9, r1
 8004a12:	4692      	mov	sl, r2
 8004a14:	eb19 0005 	adds.w	r0, r9, r5
 8004a18:	eb4a 0106 	adc.w	r1, sl, r6
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	461d      	mov	r5, r3
 8004a22:	f04f 0600 	mov.w	r6, #0
 8004a26:	196b      	adds	r3, r5, r5
 8004a28:	eb46 0406 	adc.w	r4, r6, r6
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	4623      	mov	r3, r4
 8004a30:	f7fb fbe8 	bl	8000204 <__aeabi_uldivmod>
 8004a34:	4603      	mov	r3, r0
 8004a36:	460c      	mov	r4, r1
 8004a38:	461a      	mov	r2, r3
 8004a3a:	4b0c      	ldr	r3, [pc, #48]	; (8004a6c <UART_SetConfig+0x384>)
 8004a3c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a40:	095b      	lsrs	r3, r3, #5
 8004a42:	2164      	movs	r1, #100	; 0x64
 8004a44:	fb01 f303 	mul.w	r3, r1, r3
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	00db      	lsls	r3, r3, #3
 8004a4c:	3332      	adds	r3, #50	; 0x32
 8004a4e:	4a07      	ldr	r2, [pc, #28]	; (8004a6c <UART_SetConfig+0x384>)
 8004a50:	fba2 2303 	umull	r2, r3, r2, r3
 8004a54:	095b      	lsrs	r3, r3, #5
 8004a56:	f003 0207 	and.w	r2, r3, #7
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4442      	add	r2, r8
 8004a60:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004a62:	e1b2      	b.n	8004dca <UART_SetConfig+0x6e2>
 8004a64:	40011000 	.word	0x40011000
 8004a68:	40011400 	.word	0x40011400
 8004a6c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4ad7      	ldr	r2, [pc, #860]	; (8004dd4 <UART_SetConfig+0x6ec>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d005      	beq.n	8004a86 <UART_SetConfig+0x39e>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4ad6      	ldr	r2, [pc, #856]	; (8004dd8 <UART_SetConfig+0x6f0>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	f040 80d1 	bne.w	8004c28 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a86:	f7fe f957 	bl	8002d38 <HAL_RCC_GetPCLK2Freq>
 8004a8a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	469a      	mov	sl, r3
 8004a90:	f04f 0b00 	mov.w	fp, #0
 8004a94:	46d0      	mov	r8, sl
 8004a96:	46d9      	mov	r9, fp
 8004a98:	eb18 0308 	adds.w	r3, r8, r8
 8004a9c:	eb49 0409 	adc.w	r4, r9, r9
 8004aa0:	4698      	mov	r8, r3
 8004aa2:	46a1      	mov	r9, r4
 8004aa4:	eb18 080a 	adds.w	r8, r8, sl
 8004aa8:	eb49 090b 	adc.w	r9, r9, fp
 8004aac:	f04f 0100 	mov.w	r1, #0
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004ab8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004abc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004ac0:	4688      	mov	r8, r1
 8004ac2:	4691      	mov	r9, r2
 8004ac4:	eb1a 0508 	adds.w	r5, sl, r8
 8004ac8:	eb4b 0609 	adc.w	r6, fp, r9
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	f04f 0200 	mov.w	r2, #0
 8004ad6:	f04f 0300 	mov.w	r3, #0
 8004ada:	f04f 0400 	mov.w	r4, #0
 8004ade:	0094      	lsls	r4, r2, #2
 8004ae0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ae4:	008b      	lsls	r3, r1, #2
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	4623      	mov	r3, r4
 8004aea:	4628      	mov	r0, r5
 8004aec:	4631      	mov	r1, r6
 8004aee:	f7fb fb89 	bl	8000204 <__aeabi_uldivmod>
 8004af2:	4603      	mov	r3, r0
 8004af4:	460c      	mov	r4, r1
 8004af6:	461a      	mov	r2, r3
 8004af8:	4bb8      	ldr	r3, [pc, #736]	; (8004ddc <UART_SetConfig+0x6f4>)
 8004afa:	fba3 2302 	umull	r2, r3, r3, r2
 8004afe:	095b      	lsrs	r3, r3, #5
 8004b00:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	469b      	mov	fp, r3
 8004b08:	f04f 0c00 	mov.w	ip, #0
 8004b0c:	46d9      	mov	r9, fp
 8004b0e:	46e2      	mov	sl, ip
 8004b10:	eb19 0309 	adds.w	r3, r9, r9
 8004b14:	eb4a 040a 	adc.w	r4, sl, sl
 8004b18:	4699      	mov	r9, r3
 8004b1a:	46a2      	mov	sl, r4
 8004b1c:	eb19 090b 	adds.w	r9, r9, fp
 8004b20:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b24:	f04f 0100 	mov.w	r1, #0
 8004b28:	f04f 0200 	mov.w	r2, #0
 8004b2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b30:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b34:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b38:	4689      	mov	r9, r1
 8004b3a:	4692      	mov	sl, r2
 8004b3c:	eb1b 0509 	adds.w	r5, fp, r9
 8004b40:	eb4c 060a 	adc.w	r6, ip, sl
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	4619      	mov	r1, r3
 8004b4a:	f04f 0200 	mov.w	r2, #0
 8004b4e:	f04f 0300 	mov.w	r3, #0
 8004b52:	f04f 0400 	mov.w	r4, #0
 8004b56:	0094      	lsls	r4, r2, #2
 8004b58:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b5c:	008b      	lsls	r3, r1, #2
 8004b5e:	461a      	mov	r2, r3
 8004b60:	4623      	mov	r3, r4
 8004b62:	4628      	mov	r0, r5
 8004b64:	4631      	mov	r1, r6
 8004b66:	f7fb fb4d 	bl	8000204 <__aeabi_uldivmod>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	460c      	mov	r4, r1
 8004b6e:	461a      	mov	r2, r3
 8004b70:	4b9a      	ldr	r3, [pc, #616]	; (8004ddc <UART_SetConfig+0x6f4>)
 8004b72:	fba3 1302 	umull	r1, r3, r3, r2
 8004b76:	095b      	lsrs	r3, r3, #5
 8004b78:	2164      	movs	r1, #100	; 0x64
 8004b7a:	fb01 f303 	mul.w	r3, r1, r3
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	011b      	lsls	r3, r3, #4
 8004b82:	3332      	adds	r3, #50	; 0x32
 8004b84:	4a95      	ldr	r2, [pc, #596]	; (8004ddc <UART_SetConfig+0x6f4>)
 8004b86:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8a:	095b      	lsrs	r3, r3, #5
 8004b8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b90:	4498      	add	r8, r3
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	469b      	mov	fp, r3
 8004b96:	f04f 0c00 	mov.w	ip, #0
 8004b9a:	46d9      	mov	r9, fp
 8004b9c:	46e2      	mov	sl, ip
 8004b9e:	eb19 0309 	adds.w	r3, r9, r9
 8004ba2:	eb4a 040a 	adc.w	r4, sl, sl
 8004ba6:	4699      	mov	r9, r3
 8004ba8:	46a2      	mov	sl, r4
 8004baa:	eb19 090b 	adds.w	r9, r9, fp
 8004bae:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004bb2:	f04f 0100 	mov.w	r1, #0
 8004bb6:	f04f 0200 	mov.w	r2, #0
 8004bba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bbe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004bc2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004bc6:	4689      	mov	r9, r1
 8004bc8:	4692      	mov	sl, r2
 8004bca:	eb1b 0509 	adds.w	r5, fp, r9
 8004bce:	eb4c 060a 	adc.w	r6, ip, sl
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	f04f 0200 	mov.w	r2, #0
 8004bdc:	f04f 0300 	mov.w	r3, #0
 8004be0:	f04f 0400 	mov.w	r4, #0
 8004be4:	0094      	lsls	r4, r2, #2
 8004be6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004bea:	008b      	lsls	r3, r1, #2
 8004bec:	461a      	mov	r2, r3
 8004bee:	4623      	mov	r3, r4
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	4631      	mov	r1, r6
 8004bf4:	f7fb fb06 	bl	8000204 <__aeabi_uldivmod>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	460c      	mov	r4, r1
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	4b77      	ldr	r3, [pc, #476]	; (8004ddc <UART_SetConfig+0x6f4>)
 8004c00:	fba3 1302 	umull	r1, r3, r3, r2
 8004c04:	095b      	lsrs	r3, r3, #5
 8004c06:	2164      	movs	r1, #100	; 0x64
 8004c08:	fb01 f303 	mul.w	r3, r1, r3
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	011b      	lsls	r3, r3, #4
 8004c10:	3332      	adds	r3, #50	; 0x32
 8004c12:	4a72      	ldr	r2, [pc, #456]	; (8004ddc <UART_SetConfig+0x6f4>)
 8004c14:	fba2 2303 	umull	r2, r3, r2, r3
 8004c18:	095b      	lsrs	r3, r3, #5
 8004c1a:	f003 020f 	and.w	r2, r3, #15
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4442      	add	r2, r8
 8004c24:	609a      	str	r2, [r3, #8]
 8004c26:	e0d0      	b.n	8004dca <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c28:	f7fe f872 	bl	8002d10 <HAL_RCC_GetPCLK1Freq>
 8004c2c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	469a      	mov	sl, r3
 8004c32:	f04f 0b00 	mov.w	fp, #0
 8004c36:	46d0      	mov	r8, sl
 8004c38:	46d9      	mov	r9, fp
 8004c3a:	eb18 0308 	adds.w	r3, r8, r8
 8004c3e:	eb49 0409 	adc.w	r4, r9, r9
 8004c42:	4698      	mov	r8, r3
 8004c44:	46a1      	mov	r9, r4
 8004c46:	eb18 080a 	adds.w	r8, r8, sl
 8004c4a:	eb49 090b 	adc.w	r9, r9, fp
 8004c4e:	f04f 0100 	mov.w	r1, #0
 8004c52:	f04f 0200 	mov.w	r2, #0
 8004c56:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004c5a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004c5e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004c62:	4688      	mov	r8, r1
 8004c64:	4691      	mov	r9, r2
 8004c66:	eb1a 0508 	adds.w	r5, sl, r8
 8004c6a:	eb4b 0609 	adc.w	r6, fp, r9
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	4619      	mov	r1, r3
 8004c74:	f04f 0200 	mov.w	r2, #0
 8004c78:	f04f 0300 	mov.w	r3, #0
 8004c7c:	f04f 0400 	mov.w	r4, #0
 8004c80:	0094      	lsls	r4, r2, #2
 8004c82:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c86:	008b      	lsls	r3, r1, #2
 8004c88:	461a      	mov	r2, r3
 8004c8a:	4623      	mov	r3, r4
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	4631      	mov	r1, r6
 8004c90:	f7fb fab8 	bl	8000204 <__aeabi_uldivmod>
 8004c94:	4603      	mov	r3, r0
 8004c96:	460c      	mov	r4, r1
 8004c98:	461a      	mov	r2, r3
 8004c9a:	4b50      	ldr	r3, [pc, #320]	; (8004ddc <UART_SetConfig+0x6f4>)
 8004c9c:	fba3 2302 	umull	r2, r3, r3, r2
 8004ca0:	095b      	lsrs	r3, r3, #5
 8004ca2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	469b      	mov	fp, r3
 8004caa:	f04f 0c00 	mov.w	ip, #0
 8004cae:	46d9      	mov	r9, fp
 8004cb0:	46e2      	mov	sl, ip
 8004cb2:	eb19 0309 	adds.w	r3, r9, r9
 8004cb6:	eb4a 040a 	adc.w	r4, sl, sl
 8004cba:	4699      	mov	r9, r3
 8004cbc:	46a2      	mov	sl, r4
 8004cbe:	eb19 090b 	adds.w	r9, r9, fp
 8004cc2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004cc6:	f04f 0100 	mov.w	r1, #0
 8004cca:	f04f 0200 	mov.w	r2, #0
 8004cce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cd2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004cd6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004cda:	4689      	mov	r9, r1
 8004cdc:	4692      	mov	sl, r2
 8004cde:	eb1b 0509 	adds.w	r5, fp, r9
 8004ce2:	eb4c 060a 	adc.w	r6, ip, sl
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	4619      	mov	r1, r3
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	f04f 0300 	mov.w	r3, #0
 8004cf4:	f04f 0400 	mov.w	r4, #0
 8004cf8:	0094      	lsls	r4, r2, #2
 8004cfa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004cfe:	008b      	lsls	r3, r1, #2
 8004d00:	461a      	mov	r2, r3
 8004d02:	4623      	mov	r3, r4
 8004d04:	4628      	mov	r0, r5
 8004d06:	4631      	mov	r1, r6
 8004d08:	f7fb fa7c 	bl	8000204 <__aeabi_uldivmod>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	460c      	mov	r4, r1
 8004d10:	461a      	mov	r2, r3
 8004d12:	4b32      	ldr	r3, [pc, #200]	; (8004ddc <UART_SetConfig+0x6f4>)
 8004d14:	fba3 1302 	umull	r1, r3, r3, r2
 8004d18:	095b      	lsrs	r3, r3, #5
 8004d1a:	2164      	movs	r1, #100	; 0x64
 8004d1c:	fb01 f303 	mul.w	r3, r1, r3
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	011b      	lsls	r3, r3, #4
 8004d24:	3332      	adds	r3, #50	; 0x32
 8004d26:	4a2d      	ldr	r2, [pc, #180]	; (8004ddc <UART_SetConfig+0x6f4>)
 8004d28:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2c:	095b      	lsrs	r3, r3, #5
 8004d2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d32:	4498      	add	r8, r3
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	469b      	mov	fp, r3
 8004d38:	f04f 0c00 	mov.w	ip, #0
 8004d3c:	46d9      	mov	r9, fp
 8004d3e:	46e2      	mov	sl, ip
 8004d40:	eb19 0309 	adds.w	r3, r9, r9
 8004d44:	eb4a 040a 	adc.w	r4, sl, sl
 8004d48:	4699      	mov	r9, r3
 8004d4a:	46a2      	mov	sl, r4
 8004d4c:	eb19 090b 	adds.w	r9, r9, fp
 8004d50:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004d54:	f04f 0100 	mov.w	r1, #0
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d68:	4689      	mov	r9, r1
 8004d6a:	4692      	mov	sl, r2
 8004d6c:	eb1b 0509 	adds.w	r5, fp, r9
 8004d70:	eb4c 060a 	adc.w	r6, ip, sl
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	4619      	mov	r1, r3
 8004d7a:	f04f 0200 	mov.w	r2, #0
 8004d7e:	f04f 0300 	mov.w	r3, #0
 8004d82:	f04f 0400 	mov.w	r4, #0
 8004d86:	0094      	lsls	r4, r2, #2
 8004d88:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d8c:	008b      	lsls	r3, r1, #2
 8004d8e:	461a      	mov	r2, r3
 8004d90:	4623      	mov	r3, r4
 8004d92:	4628      	mov	r0, r5
 8004d94:	4631      	mov	r1, r6
 8004d96:	f7fb fa35 	bl	8000204 <__aeabi_uldivmod>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	460c      	mov	r4, r1
 8004d9e:	461a      	mov	r2, r3
 8004da0:	4b0e      	ldr	r3, [pc, #56]	; (8004ddc <UART_SetConfig+0x6f4>)
 8004da2:	fba3 1302 	umull	r1, r3, r3, r2
 8004da6:	095b      	lsrs	r3, r3, #5
 8004da8:	2164      	movs	r1, #100	; 0x64
 8004daa:	fb01 f303 	mul.w	r3, r1, r3
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	011b      	lsls	r3, r3, #4
 8004db2:	3332      	adds	r3, #50	; 0x32
 8004db4:	4a09      	ldr	r2, [pc, #36]	; (8004ddc <UART_SetConfig+0x6f4>)
 8004db6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dba:	095b      	lsrs	r3, r3, #5
 8004dbc:	f003 020f 	and.w	r2, r3, #15
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4442      	add	r2, r8
 8004dc6:	609a      	str	r2, [r3, #8]
}
 8004dc8:	e7ff      	b.n	8004dca <UART_SetConfig+0x6e2>
 8004dca:	bf00      	nop
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dd4:	40011000 	.word	0x40011000
 8004dd8:	40011400 	.word	0x40011400
 8004ddc:	51eb851f 	.word	0x51eb851f

08004de0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004de0:	b084      	sub	sp, #16
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b084      	sub	sp, #16
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
 8004dea:	f107 001c 	add.w	r0, r7, #28
 8004dee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d122      	bne.n	8004e3e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004e0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d105      	bne.n	8004e32 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 fa50 	bl	80052d8 <USB_CoreReset>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	73fb      	strb	r3, [r7, #15]
 8004e3c:	e01a      	b.n	8004e74 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 fa44 	bl	80052d8 <USB_CoreReset>
 8004e50:	4603      	mov	r3, r0
 8004e52:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d106      	bne.n	8004e68 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	639a      	str	r2, [r3, #56]	; 0x38
 8004e66:	e005      	b.n	8004e74 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d10b      	bne.n	8004e92 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f043 0206 	orr.w	r2, r3, #6
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f043 0220 	orr.w	r2, r3, #32
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e9e:	b004      	add	sp, #16
 8004ea0:	4770      	bx	lr

08004ea2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f023 0201 	bic.w	r2, r3, #1
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004edc:	78fb      	ldrb	r3, [r7, #3]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d106      	bne.n	8004ef0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	60da      	str	r2, [r3, #12]
 8004eee:	e00b      	b.n	8004f08 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ef0:	78fb      	ldrb	r3, [r7, #3]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d106      	bne.n	8004f04 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	60da      	str	r2, [r3, #12]
 8004f02:	e001      	b.n	8004f08 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e003      	b.n	8004f10 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004f08:	2032      	movs	r0, #50	; 0x32
 8004f0a:	f7fc fad5 	bl	80014b8 <HAL_Delay>

  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3708      	adds	r7, #8
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f18:	b084      	sub	sp, #16
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b086      	sub	sp, #24
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
 8004f22:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004f26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f32:	2300      	movs	r3, #0
 8004f34:	613b      	str	r3, [r7, #16]
 8004f36:	e009      	b.n	8004f4c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	3340      	adds	r3, #64	; 0x40
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	2200      	movs	r2, #0
 8004f44:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	3301      	adds	r3, #1
 8004f4a:	613b      	str	r3, [r7, #16]
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	2b0e      	cmp	r3, #14
 8004f50:	d9f2      	bls.n	8004f38 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d11c      	bne.n	8004f92 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f66:	f043 0302 	orr.w	r3, r3, #2
 8004f6a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f70:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	601a      	str	r2, [r3, #0]
 8004f90:	e005      	b.n	8004f9e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f96:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb8:	461a      	mov	r2, r3
 8004fba:	680b      	ldr	r3, [r1, #0]
 8004fbc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d10c      	bne.n	8004fde <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d104      	bne.n	8004fd4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004fca:	2100      	movs	r1, #0
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 f949 	bl	8005264 <USB_SetDevSpeed>
 8004fd2:	e008      	b.n	8004fe6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f944 	bl	8005264 <USB_SetDevSpeed>
 8004fdc:	e003      	b.n	8004fe6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004fde:	2103      	movs	r1, #3
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f93f 	bl	8005264 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004fe6:	2110      	movs	r1, #16
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f8f3 	bl	80051d4 <USB_FlushTxFifo>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f911 	bl	8005220 <USB_FlushRxFifo>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d001      	beq.n	8005008 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800500e:	461a      	mov	r2, r3
 8005010:	2300      	movs	r3, #0
 8005012:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800501a:	461a      	mov	r2, r3
 800501c:	2300      	movs	r3, #0
 800501e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005026:	461a      	mov	r2, r3
 8005028:	2300      	movs	r3, #0
 800502a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800502c:	2300      	movs	r3, #0
 800502e:	613b      	str	r3, [r7, #16]
 8005030:	e043      	b.n	80050ba <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	4413      	add	r3, r2
 800503a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005044:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005048:	d118      	bne.n	800507c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10a      	bne.n	8005066 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4413      	add	r3, r2
 8005058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800505c:	461a      	mov	r2, r3
 800505e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005062:	6013      	str	r3, [r2, #0]
 8005064:	e013      	b.n	800508e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	015a      	lsls	r2, r3, #5
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	4413      	add	r3, r2
 800506e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005072:	461a      	mov	r2, r3
 8005074:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005078:	6013      	str	r3, [r2, #0]
 800507a:	e008      	b.n	800508e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	015a      	lsls	r2, r3, #5
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	4413      	add	r3, r2
 8005084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005088:	461a      	mov	r2, r3
 800508a:	2300      	movs	r3, #0
 800508c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	4413      	add	r3, r2
 8005096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509a:	461a      	mov	r2, r3
 800509c:	2300      	movs	r3, #0
 800509e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ac:	461a      	mov	r2, r3
 80050ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	3301      	adds	r3, #1
 80050b8:	613b      	str	r3, [r7, #16]
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d3b7      	bcc.n	8005032 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050c2:	2300      	movs	r3, #0
 80050c4:	613b      	str	r3, [r7, #16]
 80050c6:	e043      	b.n	8005150 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	015a      	lsls	r2, r3, #5
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050de:	d118      	bne.n	8005112 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10a      	bne.n	80050fc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	015a      	lsls	r2, r3, #5
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4413      	add	r3, r2
 80050ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f2:	461a      	mov	r2, r3
 80050f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050f8:	6013      	str	r3, [r2, #0]
 80050fa:	e013      	b.n	8005124 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	015a      	lsls	r2, r3, #5
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	4413      	add	r3, r2
 8005104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005108:	461a      	mov	r2, r3
 800510a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800510e:	6013      	str	r3, [r2, #0]
 8005110:	e008      	b.n	8005124 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	015a      	lsls	r2, r3, #5
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	4413      	add	r3, r2
 800511a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800511e:	461a      	mov	r2, r3
 8005120:	2300      	movs	r3, #0
 8005122:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	4413      	add	r3, r2
 800512c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005130:	461a      	mov	r2, r3
 8005132:	2300      	movs	r3, #0
 8005134:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	015a      	lsls	r2, r3, #5
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	4413      	add	r3, r2
 800513e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005142:	461a      	mov	r2, r3
 8005144:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005148:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	3301      	adds	r3, #1
 800514e:	613b      	str	r3, [r7, #16]
 8005150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	429a      	cmp	r2, r3
 8005156:	d3b7      	bcc.n	80050c8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005166:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800516a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005178:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800517a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517c:	2b00      	cmp	r3, #0
 800517e:	d105      	bne.n	800518c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	f043 0210 	orr.w	r2, r3, #16
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	699a      	ldr	r2, [r3, #24]
 8005190:	4b0f      	ldr	r3, [pc, #60]	; (80051d0 <USB_DevInit+0x2b8>)
 8005192:	4313      	orrs	r3, r2
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800519a:	2b00      	cmp	r3, #0
 800519c:	d005      	beq.n	80051aa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	f043 0208 	orr.w	r2, r3, #8
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80051aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d107      	bne.n	80051c0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051b8:	f043 0304 	orr.w	r3, r3, #4
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80051c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3718      	adds	r7, #24
 80051c6:	46bd      	mov	sp, r7
 80051c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051cc:	b004      	add	sp, #16
 80051ce:	4770      	bx	lr
 80051d0:	803c3800 	.word	0x803c3800

080051d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80051de:	2300      	movs	r3, #0
 80051e0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	019b      	lsls	r3, r3, #6
 80051e6:	f043 0220 	orr.w	r2, r3, #32
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	3301      	adds	r3, #1
 80051f2:	60fb      	str	r3, [r7, #12]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4a09      	ldr	r2, [pc, #36]	; (800521c <USB_FlushTxFifo+0x48>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d901      	bls.n	8005200 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e006      	b.n	800520e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	f003 0320 	and.w	r3, r3, #32
 8005208:	2b20      	cmp	r3, #32
 800520a:	d0f0      	beq.n	80051ee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	00030d40 	.word	0x00030d40

08005220 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005228:	2300      	movs	r3, #0
 800522a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2210      	movs	r2, #16
 8005230:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	3301      	adds	r3, #1
 8005236:	60fb      	str	r3, [r7, #12]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	4a09      	ldr	r2, [pc, #36]	; (8005260 <USB_FlushRxFifo+0x40>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d901      	bls.n	8005244 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e006      	b.n	8005252 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	f003 0310 	and.w	r3, r3, #16
 800524c:	2b10      	cmp	r3, #16
 800524e:	d0f0      	beq.n	8005232 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	00030d40 	.word	0x00030d40

08005264 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	460b      	mov	r3, r1
 800526e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	78fb      	ldrb	r3, [r7, #3]
 800527e:	68f9      	ldr	r1, [r7, #12]
 8005280:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005284:	4313      	orrs	r3, r2
 8005286:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005296:	b480      	push	{r7}
 8005298:	b085      	sub	sp, #20
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80052b0:	f023 0303 	bic.w	r3, r3, #3
 80052b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052c4:	f043 0302 	orr.w	r3, r3, #2
 80052c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3714      	adds	r7, #20
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	3301      	adds	r3, #1
 80052e8:	60fb      	str	r3, [r7, #12]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	4a13      	ldr	r2, [pc, #76]	; (800533c <USB_CoreReset+0x64>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d901      	bls.n	80052f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e01b      	b.n	800532e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	daf2      	bge.n	80052e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80052fe:	2300      	movs	r3, #0
 8005300:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	f043 0201 	orr.w	r2, r3, #1
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	3301      	adds	r3, #1
 8005312:	60fb      	str	r3, [r7, #12]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4a09      	ldr	r2, [pc, #36]	; (800533c <USB_CoreReset+0x64>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d901      	bls.n	8005320 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e006      	b.n	800532e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	2b01      	cmp	r3, #1
 800532a:	d0f0      	beq.n	800530e <USB_CoreReset+0x36>

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	00030d40 	.word	0x00030d40

08005340 <__libc_init_array>:
 8005340:	b570      	push	{r4, r5, r6, lr}
 8005342:	4e0d      	ldr	r6, [pc, #52]	; (8005378 <__libc_init_array+0x38>)
 8005344:	4c0d      	ldr	r4, [pc, #52]	; (800537c <__libc_init_array+0x3c>)
 8005346:	1ba4      	subs	r4, r4, r6
 8005348:	10a4      	asrs	r4, r4, #2
 800534a:	2500      	movs	r5, #0
 800534c:	42a5      	cmp	r5, r4
 800534e:	d109      	bne.n	8005364 <__libc_init_array+0x24>
 8005350:	4e0b      	ldr	r6, [pc, #44]	; (8005380 <__libc_init_array+0x40>)
 8005352:	4c0c      	ldr	r4, [pc, #48]	; (8005384 <__libc_init_array+0x44>)
 8005354:	f000 f820 	bl	8005398 <_init>
 8005358:	1ba4      	subs	r4, r4, r6
 800535a:	10a4      	asrs	r4, r4, #2
 800535c:	2500      	movs	r5, #0
 800535e:	42a5      	cmp	r5, r4
 8005360:	d105      	bne.n	800536e <__libc_init_array+0x2e>
 8005362:	bd70      	pop	{r4, r5, r6, pc}
 8005364:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005368:	4798      	blx	r3
 800536a:	3501      	adds	r5, #1
 800536c:	e7ee      	b.n	800534c <__libc_init_array+0xc>
 800536e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005372:	4798      	blx	r3
 8005374:	3501      	adds	r5, #1
 8005376:	e7f2      	b.n	800535e <__libc_init_array+0x1e>
 8005378:	080053d0 	.word	0x080053d0
 800537c:	080053d0 	.word	0x080053d0
 8005380:	080053d0 	.word	0x080053d0
 8005384:	080053d4 	.word	0x080053d4

08005388 <memset>:
 8005388:	4402      	add	r2, r0
 800538a:	4603      	mov	r3, r0
 800538c:	4293      	cmp	r3, r2
 800538e:	d100      	bne.n	8005392 <memset+0xa>
 8005390:	4770      	bx	lr
 8005392:	f803 1b01 	strb.w	r1, [r3], #1
 8005396:	e7f9      	b.n	800538c <memset+0x4>

08005398 <_init>:
 8005398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800539a:	bf00      	nop
 800539c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800539e:	bc08      	pop	{r3}
 80053a0:	469e      	mov	lr, r3
 80053a2:	4770      	bx	lr

080053a4 <_fini>:
 80053a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053a6:	bf00      	nop
 80053a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053aa:	bc08      	pop	{r3}
 80053ac:	469e      	mov	lr, r3
 80053ae:	4770      	bx	lr
